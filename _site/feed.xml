<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-05-17T19:14:45+01:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Zakariae el bouzarazi</title><subtitle>Malware Analysis - Reverse Engineering - Exploit Development</subtitle><author><name>Zakariae El bouzarazi</name></author><entry><title type="html">first blog</title><link href="http://localhost:4000/first%20blog/first-blog/" rel="alternate" type="text/html" title="first blog" /><published>2024-04-20T00:00:00+01:00</published><updated>2024-04-20T00:00:00+01:00</updated><id>http://localhost:4000/first%20blog/first-blog</id><content type="html" xml:base="http://localhost:4000/first%20blog/first-blog/"><![CDATA[<h1 id="first-blog">first blog</h1>

<p>hello world this is my first blog</p>]]></content><author><name>Zakariae El bouzarazi</name></author><category term="first blog" /><category term="first blog" /><summary type="html"><![CDATA[first blog]]></summary></entry><entry><title type="html">Deep Analysis of GCleaner</title><link href="http://localhost:4000/malware%20analysis/gcleaner-loader/" rel="alternate" type="text/html" title="Deep Analysis of GCleaner" /><published>2023-07-15T00:00:00+01:00</published><updated>2023-07-15T00:00:00+01:00</updated><id>http://localhost:4000/malware%20analysis/gcleaner-loader</id><content type="html" xml:base="http://localhost:4000/malware%20analysis/gcleaner-loader/"><![CDATA[<p>Howdy! I’m finally back with another malware deep dive report. This time we are digging into GCleaner.</p>

<p>GCleaner is a Pay-Per-Install (PPI) loader <a href="https://medium.com/csis-techblog/gcleaner-garbage-provider-since-2019-2708e7c87a8a">first discovered</a> in early 2019, it has been used to deploy other malicious families like Smokeloader, Amadey, Redline and Raccoon.</p>

<p>We will be working on this sample:</p>

<p>(SHA256: <code class="language-plaintext highlighter-rouge">020d370b51711b0814901d7cc32d8251affcc3506b9b4c15db659f3dbb6a2e6b</code>)</p>

<h1 id="initial-triage">Initial Triage</h1>

<p>Let’s start by running the sample in <a href="https://tria.ge/230711-rx3c1saf31">Triage sandbox</a> to get an overview of what it does.</p>

<p>We can see from the process tree that it drops and runs another binary out of <code class="language-plaintext highlighter-rouge">"%APPDATA%"</code> folder with a seemingly random name then it kills itself using <code class="language-plaintext highlighter-rouge">"taskkill"</code> and deletes the sample binary from disk.</p>

<p><a href="/assets/images/malware-analysis/gcleaner/1.png"><img src="/assets/images/malware-analysis/gcleaner/1.png" alt="1" /></a></p>

<p>The network tab shows communications to different IP addresses which are considered as C2 servers in Triage’s malware config tab. Each C2 has a different URL path, we will dig deeper to find out what each of them is responsible for.</p>

<p><a href="/assets/images/malware-analysis/gcleaner/2.png"><img src="/assets/images/malware-analysis/gcleaner/2.png" alt="2" /></a></p>

<p>Right when we open the sample in IDA we don’t have much to look at, there are some interesting strings and API imports but not very helpful to start with.</p>

<p>We can see a repeated pattern across the code where some values are pushed into the stack then xored with <code class="language-plaintext highlighter-rouge">0x2E</code>, so we first need to decrypt these values.</p>

<p><a href="/assets/images/malware-analysis/gcleaner/3.png"><img src="/assets/images/malware-analysis/gcleaner/3.png" alt="3" /></a></p>

<h1 id="string-decryption">String Decryption</h1>

<p>Automating the decryption for stack strings in this sample can be a bit tricky, luckily I noticed a specific instruction that occurs after loading the encrypted strings into stack (<code class="language-plaintext highlighter-rouge">cmp      eax, [reg+4]</code>).</p>

<p><a href="/assets/images/malware-analysis/gcleaner/4.png"><img src="/assets/images/malware-analysis/gcleaner/4.png" alt="4" /></a></p>

<p>So we can find all occurrences of this instruction then walk back to find the <code class="language-plaintext highlighter-rouge">mov</code> instructions and get the encrypted values. Let’s apply this to an IDA python script.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Lowest address used in the program
</span><span class="n">addr</span> <span class="o">=</span> <span class="n">idc</span><span class="p">.</span><span class="n">get_inf_attr</span><span class="p">(</span><span class="n">INF_MIN_EA</span><span class="p">)</span>

<span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
    <span class="c1"># Search for "cmp eax, [reg+4]"
</span>    <span class="n">addr</span> <span class="o">=</span> <span class="n">ida_search</span><span class="p">.</span><span class="n">find_binary</span><span class="p">(</span><span class="n">addr</span><span class="p">,</span> <span class="n">idc</span><span class="p">.</span><span class="n">BADADDR</span><span class="p">,</span> <span class="s">"3B ?? 04 00 00 00"</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="n">ida_search</span><span class="p">.</span><span class="n">SEARCH_NEXT</span> <span class="o">|</span> <span class="n">ida_search</span><span class="p">.</span><span class="n">SEARCH_DOWN</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">addr</span> <span class="o">==</span> <span class="n">idc</span><span class="p">.</span><span class="n">BADADDR</span><span class="p">:</span>
        <span class="k">break</span>

    <span class="n">enc_bytes</span> <span class="o">=</span> <span class="sa">b</span><span class="s">''</span>
    <span class="c1"># Search for possible stack strings in the previous 12 instructions
</span>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">12</span><span class="p">):</span>
        <span class="n">ea</span> <span class="o">=</span> <span class="n">idc</span><span class="p">.</span><span class="n">prev_head</span><span class="p">(</span><span class="n">ea</span><span class="p">)</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">idc</span><span class="p">.</span><span class="n">print_insn_mnem</span><span class="p">(</span><span class="n">ea</span><span class="p">)</span> <span class="o">==</span> <span class="s">"mov"</span> <span class="ow">and</span>
            <span class="n">idc</span><span class="p">.</span><span class="n">get_operand_type</span><span class="p">(</span><span class="n">ea</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">==</span> <span class="n">idc</span><span class="p">.</span><span class="n">o_displ</span> <span class="ow">and</span>
            <span class="n">idc</span><span class="p">.</span><span class="n">get_operand_type</span><span class="p">(</span><span class="n">ea</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="n">idc</span><span class="p">.</span><span class="n">o_imm</span><span class="p">):</span>
            <span class="c1"># Get the value of the second operand
</span>            <span class="n">operand_value</span> <span class="o">=</span> <span class="n">idc</span><span class="p">.</span><span class="n">get_operand_value</span><span class="p">(</span><span class="n">ea</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>

<p>The returned operand value is an integer but we need to store it as a byte array, so we first need to figure out the size of that operand to store it correctly.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>            <span class="c1"># Get the size of the second operand
</span>            <span class="n">insn</span> <span class="o">=</span> <span class="n">ida_ua</span><span class="p">.</span><span class="n">insn_t</span><span class="p">()</span>
            <span class="n">ida_ua</span><span class="p">.</span><span class="n">decode_insn</span><span class="p">(</span><span class="n">insn</span><span class="p">,</span> <span class="n">ea</span><span class="p">)</span>
            <span class="n">operand_size</span> <span class="o">=</span> <span class="n">ida_ua</span><span class="p">.</span><span class="n">get_dtype_size</span><span class="p">(</span><span class="n">insn</span><span class="p">.</span><span class="n">Op2</span><span class="p">.</span><span class="n">dtype</span><span class="p">)</span>
            
            <span class="c1"># Specify the correct data type
</span>            <span class="k">if</span> <span class="n">operand_size</span> <span class="o">==</span> <span class="mi">4</span><span class="p">:</span>
                <span class="n">operand_bytes</span> <span class="o">=</span> <span class="n">struct</span><span class="p">.</span><span class="n">pack</span><span class="p">(</span><span class="s">"&lt;I"</span><span class="p">,</span> <span class="n">operand_value</span><span class="p">)</span>
            <span class="k">elif</span> <span class="n">operand_size</span> <span class="o">==</span> <span class="mi">2</span><span class="p">:</span>
                <span class="n">operand_bytes</span> <span class="o">=</span> <span class="n">struct</span><span class="p">.</span><span class="n">pack</span><span class="p">(</span><span class="s">"&lt;H"</span><span class="p">,</span> <span class="n">operand_value</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">operand_bytes</span> <span class="o">=</span> <span class="n">struct</span><span class="p">.</span><span class="n">pack</span><span class="p">(</span><span class="s">"&lt;B"</span><span class="p">,</span> <span class="n">operand_value</span><span class="p">)</span>
                
            <span class="n">enc_bytes</span> <span class="o">=</span> <span class="n">operand_bytes</span> <span class="o">+</span> <span class="n">enc_bytes</span>
</code></pre></div></div>

<p>One more thing I noticed is that some strings use a combination of stack values and other values stored in the <code class="language-plaintext highlighter-rouge">".rdata"</code> section (retrieved using the XMM instruction <code class="language-plaintext highlighter-rouge">"movaps"</code>).</p>

<p><a href="/assets/images/malware-analysis/gcleaner/5.png"><img src="/assets/images/malware-analysis/gcleaner/5.png" alt="5" /></a></p>

<p>So we can search for this <code class="language-plaintext highlighter-rouge">"movaps"</code> instruction after the <code class="language-plaintext highlighter-rouge">"cmp"</code> instruction, if found we can read the values stored at its operand address and append it to the encrypted bytes.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1"># Find possible xmmword movaps
</span>    <span class="n">xmmword_addr</span> <span class="o">=</span> <span class="n">ida_search</span><span class="p">.</span><span class="n">find_binary</span><span class="p">(</span><span class="n">addr</span><span class="p">,</span> <span class="n">addr</span><span class="o">+</span><span class="mi">50</span><span class="p">,</span> <span class="n">pattern2</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="n">ida_search</span><span class="p">.</span><span class="n">SEARCH_NEXT</span> <span class="o">|</span> <span class="n">ida_search</span><span class="p">.</span><span class="n">SEARCH_DOWN</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">xmmword_addr</span> <span class="o">!=</span> <span class="n">idc</span><span class="p">.</span><span class="n">BADADDR</span><span class="p">:</span>
        <span class="c1"># Read the xmmword value
</span>        <span class="n">xmmword_value</span> <span class="o">=</span> <span class="n">idc</span><span class="p">.</span><span class="n">get_bytes</span><span class="p">(</span><span class="n">get_operand_value</span><span class="p">(</span><span class="n">xmmword_addr</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="mi">16</span><span class="p">)</span>
        <span class="n">enc_bytes</span> <span class="o">=</span> <span class="n">xmmword_value</span> <span class="o">+</span> <span class="n">enc_bytes</span>
</code></pre></div></div>

<p>Finally we can xor the encrypted values with <code class="language-plaintext highlighter-rouge">0x2E</code> (this key has been the same for all GCleaner samples I looked at).</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1"># Decrypt and strip encrypted bytes
</span>    <span class="n">dec_bytes</span> <span class="o">=</span> <span class="nb">bytes</span><span class="p">(</span><span class="n">c</span> <span class="o">^</span> <span class="mh">0x2E</span> <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">enc_bytes</span><span class="p">)</span>
    <span class="n">dec_str</span> <span class="o">=</span> <span class="n">dec_bytes</span><span class="p">.</span><span class="n">strip</span><span class="p">(</span><span class="sa">b</span><span class="s">'</span><span class="se">\x00</span><span class="s">'</span><span class="p">).</span><span class="n">decode</span><span class="p">(</span><span class="s">'utf-8'</span><span class="p">)</span>
   
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">dec_str</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">addr</span><span class="p">)</span><span class="si">}</span><span class="s"> --&gt; </span><span class="si">{</span><span class="n">dec_str</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>

        <span class="c1"># Set a comment with the decrypted string
</span>        <span class="k">if</span> <span class="n">dec_str</span> <span class="ow">and</span> <span class="n">comment_addr</span> <span class="o">!=</span> <span class="n">idc</span><span class="p">.</span><span class="n">BADADDR</span><span class="p">:</span>
            <span class="n">set_comment</span><span class="p">(</span><span class="n">comment_addr</span><span class="p">,</span> <span class="n">dec_str</span><span class="p">)</span>
</code></pre></div></div>

<p>Here is the list of decrypted strings:</p>

<details style="color: #EEFFFF; font-family: monospace !default; font-size: 0.85em; background: #263238; border: 1px solid #263238; border-radius: 3px; padding: 10px; line-height: 1.8">
    <summary style="outline: none; cursor: pointer">
        <span style="color: darkgray">
            Expand to see more
        </span><br />
&emsp; 45.12.253.56<br />
&emsp; 45.12.253.72<br />
&emsp; 45.12.253.98<br />
&emsp; 45.12.253.75/dll.php<br />
&emsp; mixinte<br />
&emsp; mixtwo<br />
</summary>
&emsp; B<br />
&emsp; USERPROFILE<br />
&emsp; CCleaner<br />
&emsp; VLC media player<br />
&emsp; Acrobat Reader DC<br />
&emsp; Russian<br />
&emsp; admin<br />
&emsp; Shah<br />
&emsp; testBench<br />
&emsp; taskmgr<br />
&emsp; Taskmgr<br />
&emsp; wireshark<br />
&emsp; Process Hacker<br />
&emsp; Wireshark<br />
&emsp; C:\Program Files<br />
&emsp; C:\ProgramData<br />
&emsp; C:\Temp<br />
&emsp; C:\Program Files<br />
&emsp; C:\ProgramData<br />
&emsp; C:\Temp<br />
&emsp; /advertisting/plus.php?s=<br />
&emsp; &amp;str=mixtwo<br />
&emsp; &amp;substr=<br />
&emsp; /default/stuk.php<br />
&emsp; /default/puk.php<br />
&emsp; NOSUB<br />
&emsp; chk<br />
&emsp; /chk<br />
&emsp; test<br />
</details>
<p>We can now see the C2 IPs, URL paths and some other interesting strings. Let’s keep going.</p>

<h1 id="anti-checks-or-is-it">Anti Checks (or is it..?)</h1>

<p>GCleaner is filled with host checks but weirdly enough it doesn’t do anything them, maybe they were like test features? copy-paste code? not really sure but let’s quickly go though them.</p>

<h2 id="checking-username">Checking username</h2>

<p>Get the current username using <code class="language-plaintext highlighter-rouge">"GetUserNameA()"</code> and compare it to hardcoded names (<code class="language-plaintext highlighter-rouge">"admin"</code>, <code class="language-plaintext highlighter-rouge">"Shah"</code>, <code class="language-plaintext highlighter-rouge">"testBench"</code>).</p>

<h2 id="checking-foreground-window">Checking foreground window</h2>

<p>Get the title of the foreground window using <code class="language-plaintext highlighter-rouge">"GetWindowTextA()"</code> and compare it to hardcoded strings.</p>

<p><a href="/assets/images/malware-analysis/gcleaner/6.png"><img src="/assets/images/malware-analysis/gcleaner/6.png" alt="6" /></a></p>

<h2 id="checking-desktop-files">Checking desktop files</h2>

<p>Search for Desktop files with specific strings in their name (<code class="language-plaintext highlighter-rouge">"CCleaner"</code>, <code class="language-plaintext highlighter-rouge">"VLC media player"</code>, <code class="language-plaintext highlighter-rouge">"Acrobat Reader DC"</code>).</p>

<h2 id="checking-locale-and-keyboard-layout">Checking locale and keyboard layout</h2>

<p>Check if the computer locale is Russian and compare the keyboard layout against specific values (CIS countries).</p>

<p><a href="/assets/images/malware-analysis/gcleaner/7.png"><img src="/assets/images/malware-analysis/gcleaner/7.png" alt="7" /></a></p>

<h1 id="dropped-binary">Dropped Binary</h1>

<p>Looking back at the process tree we need to figure out where does that child binary with random name comes from.
<code class="language-plaintext highlighter-rouge">"%APPDATA%\{846ee340-7039-11de-9d20-806e6f6e6963}\34LMAylZs6FixF.exe"</code></p>

<p>We can see below that the sample reads the <code class="language-plaintext highlighter-rouge">"%APPDATA%"</code> path using <code class="language-plaintext highlighter-rouge">"getenv()"</code> then creates a random directory using the GUID of the current hardware profile, if retrieving the hardware profile failed it will fall back to generating a random folder name. Other possible locations for creating the random directory are <code class="language-plaintext highlighter-rouge">"C:\Program Files"</code>, <code class="language-plaintext highlighter-rouge">"C:\Temp"</code>, <code class="language-plaintext highlighter-rouge">"C:\ProgramData"</code> (fallback locations).</p>

<p><a href="/assets/images/malware-analysis/gcleaner/8.png"><img src="/assets/images/malware-analysis/gcleaner/8.png" alt="8" /></a></p>

<p>Next it generates a random file name, appends <code class="language-plaintext highlighter-rouge">".exe"</code> extension to it then drops it to the newly created directory and runs it from there.</p>

<p>The binary file is hardcoded into the parent sample.</p>

<p><a href="/assets/images/malware-analysis/gcleaner/9.png"><img src="/assets/images/malware-analysis/gcleaner/9.png" alt="9" /></a></p>

<p>All that binary child does is…well…sleep for 10 seconds, that’s it :|</p>

<p><a href="/assets/images/malware-analysis/gcleaner/10.png"><img src="/assets/images/malware-analysis/gcleaner/10.png" alt="10" /></a></p>

<h1 id="c2-communications">C2 Communications</h1>

<p>The actors behind GCleaner have been known to use <a href="https://medium.com/csis-techblog/inside-view-of-brazzzersff-infrastructure-89b9188fd145">BraZZZers fast flux</a> service to hide their infrastructure, it works more like a proxy system between the victims and the real C2 server.</p>

<p>Before reaching out to the C2 servers, GCleaner adds hardcoded HTTP headers (could be used for a network sig) an a custom user-agent to each C2 request.</p>

<p><a href="/assets/images/malware-analysis/gcleaner/11.png"><img src="/assets/images/malware-analysis/gcleaner/11.png" alt="11" /></a></p>

<p>Now to figure out what each C2 request is responsible for.</p>

<h2 id="first-c2">First C2</h2>

<ul>
  <li>IP: <code class="language-plaintext highlighter-rouge">45[.]12.253.56</code></li>
  <li>UA: <code class="language-plaintext highlighter-rouge">OK</code></li>
  <li>PCAP:</li>
</ul>

<p><a href="/assets/images/malware-analysis/gcleaner/12.png"><img src="/assets/images/malware-analysis/gcleaner/12.png" alt="12" /></a></p>

<p>This C2 is likely responsible for bot registration. The sample will only continue execution if the server response is <code class="language-plaintext highlighter-rouge">"0"</code> or <code class="language-plaintext highlighter-rouge">"1"</code>, otherwise it goes to sleep and tries again.</p>

<p><a href="/assets/images/malware-analysis/gcleaner/13.png"><img src="/assets/images/malware-analysis/gcleaner/13.png" alt="13" /></a></p>

<p>The <code class="language-plaintext highlighter-rouge">"str"</code> and <code class="language-plaintext highlighter-rouge">"substr"</code> parameters in the C2 request above are possibly referring to the campaign ID, GCleaner has been known to use similar values in the past like <code class="language-plaintext highlighter-rouge">"usone"</code>, <code class="language-plaintext highlighter-rouge">"ustwo"</code>, <code class="language-plaintext highlighter-rouge">"euthree"</code>, <code class="language-plaintext highlighter-rouge">"cafive"</code>, <code class="language-plaintext highlighter-rouge">"mixshop"</code>, …</p>

<h2 id="second-c2">Second C2</h2>

<ul>
  <li>IP: <code class="language-plaintext highlighter-rouge">45[.]12.253.72</code></li>
  <li>UA: <code class="language-plaintext highlighter-rouge">OK</code></li>
  <li>PCAP:</li>
</ul>

<p><a href="/assets/images/malware-analysis/gcleaner/14.png"><img src="/assets/images/malware-analysis/gcleaner/14.png" alt="14" /></a></p>

<p>The first request to this C2 is responsible for getting an AES key.</p>

<p><a href="/assets/images/malware-analysis/gcleaner/15.png"><img src="/assets/images/malware-analysis/gcleaner/15.png" alt="15" /></a></p>

<p>The key length must be between 10 and 100 bytes, otherwise it breaks the execution.</p>

<p><a href="/assets/images/malware-analysis/gcleaner/16.png"><img src="/assets/images/malware-analysis/gcleaner/16.png" alt="16" /></a></p>

<p>The second request is responsible for getting an AES encrypted PE file (notice the filename in the response headers!), That PE file is decrypted using the key from the previous request.</p>

<p><a href="/assets/images/malware-analysis/gcleaner/17.png"><img src="/assets/images/malware-analysis/gcleaner/17.png" alt="17" /></a></p>

<p>The decryption routine is pretty trivial, the sample first calculates the SHA256 hash of the server key then derives the session key used for decryption (AES_128).</p>

<p><a href="/assets/images/malware-analysis/gcleaner/18.png"><img src="/assets/images/malware-analysis/gcleaner/18.png" alt="18" /></a></p>

<p>After that it loads the decrypted PE file into memory (without touching disk) to get the address of an export function called <code class="language-plaintext highlighter-rouge">"GetLicInfo"</code> which is used in the next stage.</p>

<p><a href="/assets/images/malware-analysis/gcleaner/19.png"><img src="/assets/images/malware-analysis/gcleaner/19.png" alt="19" /></a></p>

<h3 id="downloaded-dll">Downloaded DLL</h3>

<p>Before going further we first need to take a look at the downloaded PE file. To be able to analyze it we can either use the debugger to dump the decrypted file or get the encrypted response from the PCAP and decrypt it manually.</p>

<p>We can easily implement the decryption code in Python as follow:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">hashlib</span>
<span class="kn">from</span> <span class="nn">Crypto.Cipher</span> <span class="kn">import</span> <span class="n">AES</span>

<span class="n">enc</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">"puk.php.bin"</span><span class="p">,</span> <span class="s">"rb"</span><span class="p">).</span><span class="n">read</span><span class="p">()</span>

<span class="n">key</span> <span class="o">=</span> <span class="s">"kvQoRqtcCyMtHmQyQXOUu"</span><span class="p">.</span><span class="n">encode</span><span class="p">(</span><span class="s">"utf-16le"</span><span class="p">)</span> <span class="c1"># Important to encode!!
</span><span class="n">sha256_hash</span> <span class="o">=</span> <span class="n">hashlib</span><span class="p">.</span><span class="n">sha256</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
<span class="n">aes_key</span> <span class="o">=</span> <span class="n">sha256_hash</span><span class="p">.</span><span class="n">digest</span><span class="p">()[:</span><span class="mi">16</span><span class="p">]</span>

<span class="n">cipher</span> <span class="o">=</span> <span class="n">AES</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="n">aes_key</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="n">AES</span><span class="p">.</span><span class="n">MODE_CBC</span><span class="p">,</span> <span class="n">IV</span><span class="o">=</span><span class="sa">b</span><span class="s">"</span><span class="se">\x00</span><span class="s">"</span><span class="o">*</span><span class="mi">16</span><span class="p">)</span>
<span class="n">dec</span> <span class="o">=</span> <span class="n">cipher</span><span class="p">.</span><span class="n">decrypt</span><span class="p">(</span><span class="n">enc</span><span class="p">)</span>

<span class="nb">open</span><span class="p">(</span><span class="s">"out.bin"</span><span class="p">,</span> <span class="s">"wb"</span><span class="p">).</span><span class="n">write</span><span class="p">(</span><span class="n">dec</span><span class="p">)</span>
</code></pre></div></div>

<p>Now let’s see what this export function <code class="language-plaintext highlighter-rouge">"GetLicInfo"</code> does.</p>

<p>Basically it sends an http request to the supplied C2 server then checks the response length, if the length is greater than 2048 bytes it creates a a new directory with a random name under <code class="language-plaintext highlighter-rouge">"%APPDATA%"</code> or <code class="language-plaintext highlighter-rouge">"%TEMP%"</code> folder then generates a random filename and appends <code class="language-plaintext highlighter-rouge">".exe"</code> extension to it.</p>

<p><a href="/assets/images/malware-analysis/gcleaner/20.png"><img src="/assets/images/malware-analysis/gcleaner/20.png" alt="20" /></a></p>

<p>Finally it writes the server response to a disk file with the generated random filename and executes that file.</p>

<p><a href="/assets/images/malware-analysis/gcleaner/21.png"><img src="/assets/images/malware-analysis/gcleaner/21.png" alt="21" /></a></p>

<h2 id="third-c2">Third C2</h2>

<ul>
  <li>IP: <code class="language-plaintext highlighter-rouge">45[.]12.253.75</code></li>
  <li>UA: <code class="language-plaintext highlighter-rouge">B</code></li>
  <li>PCAP:</li>
</ul>

<p><a href="/assets/images/malware-analysis/gcleaner/22.png"><img src="/assets/images/malware-analysis/gcleaner/22.png" alt="22" /></a></p>

<p>This C2 is responsible for downloading further payloads, notice the user-agent used here is the one from the decrypted strings list unlike the previous 2 C2s.</p>

<p>The address is supplied to the external function <code class="language-plaintext highlighter-rouge">"GetLicInfo"</code> which downloads and executes the payload as we stated above. GCleaner tries to get a payload from the server for 10 iterations with a sleep period of 2 seconds between every try.</p>

<p><a href="/assets/images/malware-analysis/gcleaner/23.png"><img src="/assets/images/malware-analysis/gcleaner/23.png" alt="23" /></a></p>

<p>If no further payload is received from the server the samples kills its process and deletes the parent file from disk.</p>

<p><a href="/assets/images/malware-analysis/gcleaner/24.png"><img src="/assets/images/malware-analysis/gcleaner/24.png" alt="24" /></a></p>

<h2 id="forth-c2">Forth C2</h2>

<ul>
  <li>IP: <code class="language-plaintext highlighter-rouge">45[.]12.253.98</code></li>
</ul>

<p>This C2 wasn’t used in the sample we are looking at.</p>

<h1 id="config-extraction">Config Extraction</h1>

<p>We can use the IDA python script we used for string decryption to build a standalone config extractor as most of the interesting stuff are in the decrypted strings list.</p>

<p>Here’s the output of the code after extracting the useful information:</p>

<p><a href="/assets/images/malware-analysis/gcleaner/25.png"><img src="/assets/images/malware-analysis/gcleaner/25.png" alt="25" /></a></p>

<p>The code can be found <a href="https://github.com/n1ght-w0lf/MalwareAnalysis/tree/master/GCleaner">here</a>.</p>

<p>(this script is not optimized for production, it’s just for research purposes)</p>

<h1 id="hunting">Hunting</h1>

<h2 id="urlscan">Urlscan</h2>

<p>The URL path of the first C2 request can be a good candidate to hunt for more C2s on urlscan.</p>

<p>I looked at more samples and found these two URL patterns:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">s=NOSUB&amp;str=...&amp;substr=...</code></li>
  <li><code class="language-plaintext highlighter-rouge">sub=NOSUB&amp;stream=...&amp;substream=...</code></li>
</ul>

<p>So we can use the <code class="language-plaintext highlighter-rouge">"page.url"</code> field to <a href="https://urlscan.io/search/#page.url%3A%22sub%3DNOSUB%26stream%3D%22%20%7C%7C%20page.url%3A%22s%3DNOSUB%26str%3D%22">search</a> for the first part of these patterns.</p>

<p><a href="/assets/images/malware-analysis/gcleaner/26.png"><img src="/assets/images/malware-analysis/gcleaner/26.png" alt="26" /></a></p>

<h2 id="yara">Yara</h2>

<p>We saw that many strings were encrypted but we can use some of the hardcoded ones to create a simple yara rule for hunting more samples.</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">rule</span> <span class="nt">GCleaner</span> <span class="p">{</span>
    <span class="py">meta</span><span class="p">:</span>
        <span class="n">description</span> <span class="err">=</span> <span class="s1">"Detects GCleaner payload"</span>
        <span class="n">author</span> <span class="err">=</span> <span class="s1">"Abdallah Elshinbary (@_n1ghtw0lf)"</span>
        <span class="n">hash1</span> <span class="err">=</span> <span class="s1">"020d370b51711b0814901d7cc32d8251affcc3506b9b4c15db659f3dbb6a2e6b"</span>
        <span class="n">hash2</span> <span class="err">=</span> <span class="s1">"73ed1926e850a9a076a8078932e76e1ac5f109581996dd007f00681ae4024baa"</span>

    <span class="n">strings</span><span class="p">:</span>
        <span class="p">//</span> <span class="n">Kill</span> <span class="n">self</span>
        <span class="err">$</span><span class="n">s1</span>  <span class="err">=</span> <span class="s1">"\" &amp; exit"</span> <span class="n">ascii</span> <span class="n">fullword</span>
        <span class="err">$</span><span class="n">s2</span>  <span class="err">=</span> <span class="s1">"\" /f &amp; erase "</span> <span class="n">ascii</span> <span class="n">fullword</span>
        <span class="err">$</span><span class="n">s3</span>  <span class="err">=</span> <span class="s1">"/c taskkill /im \""</span> <span class="n">ascii</span> <span class="n">fullword</span>
        <span class="p">//</span> <span class="n">Anti</span> <span class="n">checks</span>
        <span class="err">$</span><span class="n">s4</span>  <span class="err">=</span> <span class="s1">" Far "</span> <span class="n">ascii</span> <span class="n">fullword</span>
        <span class="err">$</span><span class="n">s5</span>  <span class="err">=</span> <span class="s1">"roxifier"</span> <span class="n">ascii</span> <span class="n">fullword</span>
        <span class="err">$</span><span class="n">s6</span>  <span class="err">=</span> <span class="s1">"HTTP Analyzer"</span> <span class="n">ascii</span> <span class="n">fullword</span>
        <span class="err">$</span><span class="n">s7</span>  <span class="err">=</span> <span class="s1">"Wireshark"</span> <span class="n">ascii</span> <span class="n">fullword</span>
        <span class="err">$</span><span class="n">s8</span>  <span class="err">=</span> <span class="s1">"NetworkMiner"</span> <span class="n">ascii</span> <span class="n">fullword</span>
        <span class="p">//</span> <span class="n">HTTP</span> <span class="n">headers</span>
        <span class="err">$</span><span class="n">s9</span>  <span class="err">=</span> <span class="s1">"Accept-Language: ru-RU,ru;q=0.9,en;q=0.8"</span> <span class="n">ascii</span> <span class="n">fullword</span>
        <span class="err">$</span><span class="n">s10</span> <span class="err">=</span> <span class="s1">"Accept-Charset: iso-8859-1, utf-8, utf-16, *;q=0.1"</span> <span class="n">ascii</span> <span class="n">fullword</span>
        <span class="err">$</span><span class="n">s11</span> <span class="err">=</span> <span class="s1">"Accept-Encoding: deflate, gzip, x-gzip, identity, *;q=0"</span> <span class="n">ascii</span> <span class="n">fullword</span>
        <span class="err">$</span><span class="n">s12</span> <span class="err">=</span> <span class="s1">"Accept: text/html, application/xml;q=0.9, application/xhtml+xml, image/png, image/jpeg, image/gif, image/x-xbitmap, */*;q=0.1"</span> <span class="n">ascii</span> <span class="n">fullword</span>
    
    <span class="n">condition</span><span class="p">:</span>
        <span class="n">uint16</span><span class="p">(</span><span class="m">0</span><span class="p">)</span> <span class="err">==</span> <span class="m">0</span><span class="n">x5a4d</span> <span class="n">and</span>
        <span class="m">10</span> <span class="n">of</span> <span class="n">them</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="references">References</h1>

<ul>
  <li>
    <p><a href="https://medium.com/csis-techblog/gcleaner-garbage-provider-since-2019-2708e7c87a8a">https://medium.com/csis-techblog/gcleaner-garbage-provider-since-2019-2708e7c87a8a</a></p>
  </li>
  <li>
    <p><a href="https://medium.com/csis-techblog/inside-view-of-brazzzersff-infrastructure-89b9188fd145">https://medium.com/csis-techblog/inside-view-of-brazzzersff-infrastructure-89b9188fd145</a></p>
  </li>
</ul>]]></content><author><name>Zakariae El bouzarazi</name></author><category term="Malware Analysis" /><summary type="html"><![CDATA[GCleaner is a Pay-Per-Install (PPI) loader first discovered in early 2019, it has been used to deploy other malicious families like...]]></summary></entry><entry><title type="html">Dotnet String Decryptor</title><link href="http://localhost:4000/tutorials/dotnet-string-decryptor/" rel="alternate" type="text/html" title="Dotnet String Decryptor" /><published>2023-06-15T00:00:00+01:00</published><updated>2023-06-15T00:00:00+01:00</updated><id>http://localhost:4000/tutorials/dotnet-string-decryptor</id><content type="html" xml:base="http://localhost:4000/tutorials/dotnet-string-decryptor/"><![CDATA[<p>Welcome back! This is a short blog post about reverse engineering dotnet malware.</p>

<p>When working with dotnet malware samples I always come around samples with obfuscated strings which makes analysis harder.</p>

<p>My go to way to handle this situation was to identify the string decryption routine (through static/dynamic analysis) then use <code class="language-plaintext highlighter-rouge">de4dot</code> to decrypt the strings.</p>

<p>But sometimes you don’t want to go through every sample and find the decryption routine or you need to automate this process for a collection of different samples.</p>

<p>While looking around for a solution I found this cool <a href="http://rhotav.com/stringDecryptionWithPythonen/">blog</a>, so I will be building on it to write a generic dotnet string decryptor which will hopefully make life a bit easier.</p>

<p>We will be working on an obfuscated sample of <a href="https://malpedia.caad.fkie.fraunhofer.de/details/win.dcrat">DCRat</a> to test our script.
<a href="https://bazaar.abuse.ch/sample/c6244c8e4e4cdecd641017d52d344b1db6a23d05fd6a8ad338c8f4f77481f483/">c6244c8e4e4cdecd641017d52d344b1db6a23d05fd6a8ad338c8f4f77481f483</a></p>

<h1 id="writing-the-deobfuscation-script">Writing the deobfuscation script</h1>

<h2 id="step-1--importing-libs-and-loading-the-net-file">Step 1 : Importing libs and loading the .NET file</h2>

<p>We first need to install <code class="language-plaintext highlighter-rouge">pythonnet</code> which allows CLR namespaces to be treated essentially as python packages.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip install pythonnet
</code></pre></div></div>

<p>Then we can import the required reflection modules which we will use later to get and invoke decryption methods.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">clr</span>
<span class="kn">from</span> <span class="nn">System.Reflection</span> <span class="kn">import</span> <span class="n">Assembly</span><span class="p">,</span> <span class="n">BindingFlags</span><span class="p">,</span> <span class="n">MethodInfo</span>
</code></pre></div></div>

<p>We also need to add a reference to <code class="language-plaintext highlighter-rouge">dnlib.dll</code> which we will use to parse the .NET assemblies and modules.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">clr</span><span class="p">.</span><span class="n">AddReference</span><span class="p">(</span><span class="s">"./dnlib"</span><span class="p">)</span>

<span class="kn">import</span> <span class="nn">dnlib</span>
<span class="kn">from</span> <span class="nn">dnlib.DotNet</span> <span class="kn">import</span> <span class="n">ModuleDef</span><span class="p">,</span> <span class="n">ModuleDefMD</span>
<span class="kn">from</span> <span class="nn">dnlib.DotNet.Emit</span> <span class="kn">import</span> <span class="n">OpCodes</span>
<span class="kn">from</span> <span class="nn">dnlib.DotNet.Writer</span> <span class="kn">import</span> <span class="n">ModuleWriterOptions</span>
</code></pre></div></div>

<p>Now we can load our .NET file.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">file_module</span> <span class="o">=</span> <span class="n">ModuleDefMD</span><span class="p">.</span><span class="n">Load</span><span class="p">(</span><span class="n">file_path</span><span class="p">)</span>
<span class="n">file_assembly</span> <span class="o">=</span> <span class="n">Assembly</span><span class="p">.</span><span class="n">LoadFile</span><span class="p">(</span><span class="n">file_path</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="step-2--finding-suspected-decryption-methods">Step 2 : Finding suspected decryption methods</h2>

<p>Before we get any further we need to define the signatures of the suspected methods that are used for string decryption.</p>

<p>A method signature consists of the type of its parameters and its return type.</p>

<p>Below is the string decryption method in the sample we are working on:</p>

<p><a href="/assets/images/tutorials/dotnet/1.png"><img src="/assets/images/tutorials/dotnet/1.png" alt="1" /></a></p>

<p>I also found some wrapper methods that call the decryption method and they had a different signature.</p>

<p><a href="/assets/images/tutorials/dotnet/2.png"><img src="/assets/images/tutorials/dotnet/2.png" alt="2" /></a></p>

<p>So we can define our suspected method signatures as follows:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">DECRYPTION_METHOD_SIGNATURES</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
        <span class="s">"Parameters"</span><span class="p">:</span> <span class="p">[</span><span class="s">"System.Int32"</span><span class="p">],</span>
        <span class="s">"ReturnType"</span><span class="p">:</span> <span class="s">"System.String"</span>
    <span class="p">},</span>
    <span class="p">{</span>
        <span class="s">"Parameters"</span><span class="p">:</span> <span class="p">[</span><span class="s">"System.Int32"</span><span class="p">],</span>
        <span class="s">"ReturnType"</span><span class="p">:</span> <span class="s">"System.Object"</span>
    <span class="p">},</span>
<span class="p">]</span>
</code></pre></div></div>

<p>Of course there could be other methods with similar signatures which are not related to string decryption, but invoking them shouldn’t affect the end result (<strong>and you better run the script in a sandboxed environment</strong>).</p>

<p>Next we use the reflection modules to loop through the methods of each Type (classes, interfaces, …) and find suspected methods based on the list of signatures we defined above.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Search for static, public and non public members
</span><span class="n">eFlags</span> <span class="o">=</span> <span class="n">BindingFlags</span><span class="p">.</span><span class="n">Static</span> <span class="o">|</span> <span class="n">BindingFlags</span><span class="p">.</span><span class="n">Public</span> <span class="o">|</span> <span class="n">BindingFlags</span><span class="p">.</span><span class="n">NonPublic</span>

<span class="k">for</span> <span class="n">module_type</span> <span class="ow">in</span> <span class="n">file_assembly</span><span class="p">.</span><span class="n">GetTypes</span><span class="p">():</span>
    <span class="k">for</span> <span class="n">method</span> <span class="ow">in</span> <span class="n">module_type</span><span class="p">.</span><span class="n">GetMethods</span><span class="p">(</span><span class="n">eFlags</span><span class="p">):</span>
</code></pre></div></div>

<p>If we find a suspected method we need to store its corresponding signature and <a href="https://learn.microsoft.com/en-us/dotnet/api/system.reflection.methodinfo">MethodInfo</a> object which we will use later to invoke that method.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="c1"># Check if the current method has a suspected signature
</span>        <span class="k">for</span> <span class="n">sig</span> <span class="ow">in</span> <span class="n">StringDecryptor</span><span class="p">.</span><span class="n">DECRYPTION_METHOD_SIGNATURES</span><span class="p">:</span>
            <span class="c1"># Check number of parameters and return type
</span>            <span class="n">parameters</span> <span class="o">=</span> <span class="n">method</span><span class="p">.</span><span class="n">GetParameters</span><span class="p">()</span>
            <span class="k">if</span> <span class="p">((</span><span class="nb">len</span><span class="p">(</span><span class="n">parameters</span><span class="p">)</span> <span class="o">==</span> <span class="nb">len</span><span class="p">(</span><span class="n">sig</span><span class="p">[</span><span class="s">"Parameters"</span><span class="p">]))</span> <span class="ow">and</span>
                <span class="p">(</span><span class="n">method</span><span class="p">.</span><span class="n">ReturnType</span><span class="p">.</span><span class="n">FullName</span> <span class="o">==</span> <span class="n">sig</span><span class="p">[</span><span class="s">"ReturnType"</span><span class="p">])):</span>
               
                <span class="c1"># Check parameters types
</span>                <span class="n">param_types_match</span> <span class="o">=</span> <span class="bp">True</span>
                <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">parameters</span><span class="p">)):</span>
                    <span class="k">if</span> <span class="n">parameters</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">ParameterType</span><span class="p">.</span><span class="n">FullName</span> <span class="o">!=</span> <span class="n">sig</span><span class="p">[</span><span class="s">"Parameters"</span><span class="p">][</span><span class="n">i</span><span class="p">]:</span>
                        <span class="n">param_types_match</span> <span class="o">=</span> <span class="bp">False</span>
                        <span class="k">break</span>

                <span class="k">if</span> <span class="n">param_types_match</span><span class="p">:</span>
                    <span class="c1"># Store the signature and MethodInfo object of the current method
</span>                    <span class="n">method_name</span> <span class="o">=</span> <span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">method</span><span class="p">.</span><span class="n">DeclaringType</span><span class="p">.</span><span class="n">FullName</span><span class="si">}</span><span class="s">::</span><span class="si">{</span><span class="n">method</span><span class="p">.</span><span class="n">Name</span><span class="si">}</span><span class="s">"</span>
                    <span class="n">suspected_methods</span><span class="p">[</span><span class="n">method_name</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">sig</span><span class="p">,</span> <span class="n">method</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="step-3--finding-references-to-suspected-methods">Step 3 : Finding references to suspected methods</h2>

<p>The next step is to find references to the suspected methods so we can get the required parameters.</p>

<p>To do this we can use dnlib modules to loop through the CIL instructions of each method and find calls to these methods.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">module_type</span> <span class="ow">in</span> <span class="n">file_module</span><span class="p">.</span><span class="n">Types</span><span class="p">:</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">module_type</span><span class="p">.</span><span class="n">HasMethods</span><span class="p">:</span>
        <span class="k">continue</span>

    <span class="k">for</span> <span class="n">method</span> <span class="ow">in</span> <span class="n">module_type</span><span class="p">.</span><span class="n">Methods</span><span class="p">:</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">method</span><span class="p">.</span><span class="n">HasBody</span><span class="p">:</span>
            <span class="k">continue</span>

        <span class="c1"># Loop through method instructions
</span>        <span class="k">for</span> <span class="n">insnIdx</span><span class="p">,</span> <span class="n">insn</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">method</span><span class="p">.</span><span class="n">Body</span><span class="p">.</span><span class="n">Instructions</span><span class="p">):</span>
            <span class="c1"># Find Call instructions
</span>            <span class="k">if</span> <span class="n">insn</span><span class="p">.</span><span class="n">OpCode</span> <span class="o">==</span> <span class="n">OpCodes</span><span class="p">.</span><span class="n">Call</span><span class="p">:</span>
                <span class="k">for</span> <span class="n">s_method_name</span><span class="p">,</span> <span class="p">(</span><span class="n">s_method_sig</span><span class="p">,</span> <span class="n">s_method_info</span><span class="p">)</span> <span class="ow">in</span> <span class="n">suspected_methods</span><span class="p">.</span><span class="n">items</span><span class="p">():</span>
                    <span class="c1"># Check if the callee is one of the suspected methods
</span>                    <span class="k">if</span> <span class="nb">str</span><span class="p">(</span><span class="n">s_method_name</span><span class="p">)</span> <span class="ow">in</span> <span class="nb">str</span><span class="p">(</span><span class="n">insn</span><span class="p">.</span><span class="n">Operand</span><span class="p">):</span>
</code></pre></div></div>

<p>If we find a reference call, we need to get the required parameters (note that they are pushed to the stack in reverse order).</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>                                <span class="c1"># Get method parameters in reverse order
</span>                                <span class="n">params</span> <span class="o">=</span> <span class="p">[]</span>
                                <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">s_method_sig</span><span class="p">[</span><span class="s">"Parameters"</span><span class="p">])):</span>
                                    <span class="n">operand</span> <span class="o">=</span> <span class="n">GetOperandValue</span><span class="p">(</span>
                                        <span class="n">method</span><span class="p">.</span><span class="n">Body</span><span class="p">.</span><span class="n">Instructions</span><span class="p">[</span><span class="n">insnIdx</span> <span class="o">-</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">],</span>
                                        <span class="n">s_method_sig</span><span class="p">[</span><span class="s">"Parameters"</span><span class="p">][</span><span class="o">-</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">])</span>
                                    <span class="k">if</span> <span class="n">operand</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
                                        <span class="n">params</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">operand</span><span class="p">)</span>

                                <span class="c1"># Check if we got all the parameters
</span>                                <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">params</span><span class="p">)</span> <span class="o">==</span> <span class="nb">len</span><span class="p">(</span><span class="n">s_method_sig</span><span class="p">[</span><span class="s">"Parameters"</span><span class="p">]):</span>
</code></pre></div></div>

<p>Next we can invoke suspected methods to get the decrypted strings</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>                                    <span class="c1"># Invoke suspected method
</span>                                    <span class="k">try</span><span class="p">:</span>
                                        <span class="n">result</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">s_method_info</span><span class="p">.</span><span class="n">Invoke</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="n">params</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]))</span>
                                    <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
                                        <span class="k">continue</span>
</code></pre></div></div>

<h2 id="step-4--patching">Step 4 : Patching</h2>

<p>If the method invoke succeeded we can safely patch the method parameters with NOPs and patch the method call itself with the decrypted string.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>                                    <span class="c1"># Patch suspected method parameters with NOPs
</span>                                    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">s_method_sig</span><span class="p">[</span><span class="s">"Parameters"</span><span class="p">])):</span>
                                        <span class="n">method</span><span class="p">.</span><span class="n">Body</span><span class="p">.</span><span class="n">Instructions</span><span class="p">[</span><span class="n">insnIdx</span> <span class="o">-</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">].</span><span class="n">OpCode</span> <span class="o">=</span> <span class="n">OpCodes</span><span class="p">.</span><span class="n">Nop</span>

                                    <span class="c1"># Patch suspected method call with the result string
</span>                                    <span class="n">method</span><span class="p">.</span><span class="n">Body</span><span class="p">.</span><span class="n">Instructions</span><span class="p">[</span><span class="n">insnIdx</span><span class="p">].</span><span class="n">OpCode</span> <span class="o">=</span> <span class="n">OpCodes</span><span class="p">.</span><span class="n">Ldstr</span>
                                    <span class="n">method</span><span class="p">.</span><span class="n">Body</span><span class="p">.</span><span class="n">Instructions</span><span class="p">[</span><span class="n">insnIdx</span><span class="p">].</span><span class="n">Operand</span> <span class="o">=</span> <span class="n">result</span>
                                    <span class="n">decrypted_strings</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="step-5--saving">Step 5 : Saving</h2>

<p>Finally we can save the deobfuscated file to disk.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Add writer options to ignore dnlib errors
</span><span class="n">options</span> <span class="o">=</span> <span class="n">ModuleWriterOptions</span><span class="p">(</span><span class="n">file_module</span><span class="p">)</span>
<span class="n">options</span><span class="p">.</span><span class="n">Logger</span> <span class="o">=</span> <span class="n">dnlib</span><span class="p">.</span><span class="n">DotNet</span><span class="p">.</span><span class="n">DummyLogger</span><span class="p">.</span><span class="n">NoThrowInstance</span>

<span class="c1"># Write cleaned module content
</span><span class="n">file_module</span><span class="p">.</span><span class="n">Write</span><span class="p">(</span><span class="s">"out.bin"</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span>
</code></pre></div></div>

<h1 id="testing-and-final-notes">Testing and final notes</h1>

<p>Let’s run the script on the sample we have and see the results.</p>

<table>
  <tbody>
    <tr>
      <td><a href="/assets/images/tutorials/dotnet/3.png"><img src="/assets/images/tutorials/dotnet/3.png" alt="3" /></a></td>
      <td><a href="/assets/images/tutorials/dotnet/4.png"><img src="/assets/images/tutorials/dotnet/4.png" alt="4" /></a></td>
    </tr>
  </tbody>
</table>

<p>Perfect, now it’s much easier to work on the sample and analyze its functionalities.</p>

<p>A little something before we wrap up, you can check if a PE is a dotnet file by checking the existence of the <code class="language-plaintext highlighter-rouge">IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR</code> data directory (at index 14).</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dotnet_dir</span> <span class="o">=</span> <span class="n">pefile</span><span class="p">.</span><span class="n">DIRECTORY_ENTRY</span><span class="p">[</span><span class="s">'IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR'</span><span class="p">]</span> <span class="c1"># COM descriptor table index
</span><span class="k">if</span> <span class="n">pe</span><span class="p">.</span><span class="n">OPTIONAL_HEADER</span><span class="p">.</span><span class="n">DATA_DIRECTORY</span><span class="p">[</span><span class="n">dotnet_dir</span><span class="p">].</span><span class="n">VirtualAddress</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
    <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">(</span><span class="s">"[-] File is not .NET"</span><span class="p">)</span>
</code></pre></div></div>

<p>The full code can be found <a href="https://github.com/n1ght-w0lf/dotnet-string-decryptor">here</a>.</p>

<p>Until next time, cheers!</p>]]></content><author><name>Zakariae El bouzarazi</name></author><category term="Tutorials" /><summary type="html"><![CDATA[Welcome back! This is a short blog about reverse engineering dotnet malware. When working with dotnet malware samples...]]></summary></entry><entry><title type="html">Writing x64dbg plugins</title><link href="http://localhost:4000/tutorials/writing-x64dbg-plugins/" rel="alternate" type="text/html" title="Writing x64dbg plugins" /><published>2022-12-17T00:00:00+01:00</published><updated>2022-12-17T00:00:00+01:00</updated><id>http://localhost:4000/tutorials/writing-x64dbg-plugins</id><content type="html" xml:base="http://localhost:4000/tutorials/writing-x64dbg-plugins/"><![CDATA[<p>In the <a href="https://n1ght-w0lf.github.io/tutorials/writing-x64dbg-scripts">previous post</a> we talked about writing x64dbg scripts, now let’s dive deeper and write our own plugin to do the same job (automatically dumping unpacked PE payloads in memory).</p>

<p>x64dbg comes with an integrated plugin SDK for creating plugins using C++.</p>

<h2 id="setup">Setup</h2>

<p>The easiest way to create a plugin is to use the <a href="https://github.com/x64dbg/PluginTemplate">PluginTemplate</a> to create a new repository for your plugin.</p>

<p>Next you can edit <code class="language-plaintext highlighter-rouge">cmake.toml</code> which contains the project configuration, for this tutorial we will only change the <code class="language-plaintext highlighter-rouge">name</code> and <code class="language-plaintext highlighter-rouge">target</code> values to our plugin name.</p>

<div class="language-cmake highlighter-rouge"><div class="highlight"><pre class="highlight"><code>name = <span class="s2">"EasyDump"</span>
....
[target.EasyDump]
</code></pre></div></div>

<p>To build the project for 64-bit –&gt; <code class="language-plaintext highlighter-rouge">build64\ProjectName.sln</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cmake -B build64 -A x64
cmake --build build64 --config Release
</code></pre></div></div>

<p>To build the project for 32-bit –&gt; <code class="language-plaintext highlighter-rouge">build32\ProjectName.sln</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cmake -B build32 -A Win32
cmake --build build32 --config Release
</code></pre></div></div>

<h2 id="plugin-structure">Plugin structure</h2>

<p>A plugin must have an exported function called <code class="language-plaintext highlighter-rouge">pluginit</code>, this is the first function that gets called when the plugin is loaded and where the plugin data is initialized.</p>

<p>Other optional exports are:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">plugstop</code>:</li>
</ul>

<p>called when the plugin is about to be unloaded and where the plugin data cleanup occurs.</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">plugsetup</code>:</p>

    <p>called when the plugin initialization was successful, here you can register menus and other GUI-related things.</p>
  </li>
</ul>

<h2 id="sdk-functions">SDK functions</h2>

<p>Before we go any further we need to know what functions exported by the plugin SDK we can use, you can find some of these functions in the official <a href="https://help.x64dbg.com/en/latest/developers/functions/index.html">docs</a> but many of them are not documented.</p>

<p>To view the full list you can explore the SDK header files.</p>

<p><a href="/assets/images/tutorials/x64dbg/plugins/1.png"><img src="/assets/images/tutorials/x64dbg/plugins/1.png" alt="1" /></a></p>

<p>For me plugin SDK functions are divided into 4 main categories:</p>

<ul>
  <li>
    <p>_plugin_ functions @<code class="language-plaintext highlighter-rouge">_plugins.h</code>:</p>

    <p>Helper functions for plugin setup, initialization and logging.</p>
  </li>
  <li>
    <p>bridge functions @<code class="language-plaintext highlighter-rouge">bridgemain.h</code>:</p>

    <p>Bridge is the communication library for the DBG and GUI part of x64dbg.</p>
  </li>
  <li>
    <p>scriptapi functions @<code class="language-plaintext highlighter-rouge">_scriptapi_*.h</code>:</p>

    <p>It is intended to be used by plugins. It provides easy scripting experience for developers.</p>
  </li>
  <li>
    <p>TitanEngine functions @<code class="language-plaintext highlighter-rouge">TitanEngine.h</code>:</p>

    <p>Titan is the debugging engine for x64dbg.</p>
  </li>
</ul>

<p>Most functions are self explanatory or documented in the official docs, for TitanEngine functions you can find its docs <a href="https://github.com/x64dbg/x64dbg/blob/development/src/dbg/TitanEngine/TitanEngine.txt">here</a> or you can check the markdown version for better readability I uploaded <a href="https://gist.github.com/N1ght-W0lf/49c4141b52acf45434679602acb32f88">here</a>.</p>

<p>Ok enough talk let’s get our hands dirty.</p>

<h2 id="implementation">Implementation</h2>

<p>Your code should go into <code class="language-plaintext highlighter-rouge">plugin.cpp</code> file, let’s start with the plugin main components.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Initialize your plugin data here.</span>
<span class="kt">bool</span> <span class="nf">pluginInit</span><span class="p">(</span><span class="n">PLUG_INITSTRUCT</span><span class="o">*</span> <span class="n">initStruct</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">_plugin_logputs</span><span class="p">(</span><span class="s">"["</span> <span class="n">PLUGIN_NAME</span> <span class="s">"] Loaded successfully!"</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">_plugin_registercommand</span><span class="p">(</span><span class="n">pluginHandle</span><span class="p">,</span> <span class="s">"EasyDump"</span><span class="p">,</span> <span class="n">cbEasyDump</span><span class="p">,</span> <span class="nb">true</span><span class="p">))</span>
        <span class="k">return</span> <span class="n">fail</span><span class="p">(</span><span class="s">"Failed to register command"</span><span class="p">);</span>

    <span class="k">return</span> <span class="nb">true</span><span class="p">;</span> <span class="c1">// Return false to cancel loading the plugin.</span>
<span class="p">}</span>

<span class="c1">// Deinitialize your plugin data here.</span>
<span class="kt">void</span> <span class="n">pluginStop</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">_plugin_unregistercommand</span><span class="p">(</span><span class="n">pluginHandle</span><span class="p">,</span> <span class="s">"EasyDump"</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>First we need to register a command that we can use in the command prompt using <code class="language-plaintext highlighter-rouge">_plugin_registercommand</code> function, The definition for this function is:</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">bool</span> <span class="nf">_plugin_registercommand</span><span class="p">(</span>
	<span class="kt">int</span> <span class="n">pluginHandle</span><span class="p">,</span>          <span class="c1">// Plugin handle</span>
	<span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">command</span><span class="p">,</span>       <span class="c1">// Command name</span>
	<span class="n">CBPLUGINCOMMAND</span> <span class="n">cbCommand</span><span class="p">,</span> <span class="c1">// Callback function</span>
	<span class="kt">bool</span> <span class="n">debugonly</span>             <span class="c1">// Restrict the command to debug-only</span>
<span class="p">);</span>
</code></pre></div></div>

<p>And of course don’t forget to unregister this command inside <code class="language-plaintext highlighter-rouge">pluginStop</code> using <code class="language-plaintext highlighter-rouge">_plugin_unregistercommand</code>.</p>

<p>Now let’s implement the callback function.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">static</span> <span class="kt">bool</span> <span class="nf">cbEasyDump</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
    <span class="c1">// Delete All BPs</span>
    <span class="n">DbgCmdExec</span><span class="p">(</span><span class="s">"bpc"</span><span class="p">);</span>

    <span class="c1">// Set BP on VirtualAlloc ret</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">SetAPIBreakPoint</span><span class="p">(</span><span class="s">"kernelbase.dll"</span><span class="p">,</span> <span class="s">"VirtualAlloc"</span><span class="p">,</span> <span class="n">UE_BREAKPOINT</span><span class="p">,</span> <span class="n">UE_APIEND</span><span class="p">,</span> <span class="n">cbVirtualAlloc</span><span class="p">))</span>
        <span class="n">fail</span><span class="p">(</span><span class="s">"Failed to set a Breakpoint on VirtualAlloc"</span><span class="p">);</span>

    <span class="c1">// Set BP on VirtualProtect start</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">SetAPIBreakPoint</span><span class="p">(</span><span class="s">"kernelbase.dll"</span><span class="p">,</span> <span class="s">"VirtualProtect"</span><span class="p">,</span> <span class="n">UE_BREAKPOINT</span><span class="p">,</span> <span class="n">UE_APISTART</span><span class="p">,</span> <span class="n">cbVirtualProtect</span><span class="p">))</span>
        <span class="n">fail</span><span class="p">(</span><span class="s">"Failed to set a Breakpoint on VirtualProtect"</span><span class="p">);</span>

    <span class="n">_plugin_logprint</span><span class="p">(</span><span class="s">"["</span> <span class="n">PLUGIN_NAME</span> <span class="s">"] Starting the program...</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="n">DbgCmdExec</span><span class="p">(</span><span class="s">"run"</span><span class="p">);</span>

    <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Callback arguments are passed in <code class="language-plaintext highlighter-rouge">argv</code> starting at index 1, but our command doesn’t need any arguments.</p>

<p>We will start with deleting all breakpoints to let the plugin run without interruption using <code class="language-plaintext highlighter-rouge">DbgCmdExec</code> to execute <code class="language-plaintext highlighter-rouge">bpc</code> command (breakpoint clear).</p>

<p>Next we set our breakpoints using <code class="language-plaintext highlighter-rouge">SetAPIBreakPoint</code> function which is defined as:</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">bool</span> <span class="kr">__stdcall</span> <span class="nf">SetAPIBreakPoint</span><span class="p">(</span>
    <span class="kt">char</span><span class="o">*</span> <span class="n">szDLLName</span><span class="p">,</span>   <span class="c1">// DLL name</span>
    <span class="kt">char</span><span class="o">*</span> <span class="n">szAPIName</span><span class="p">,</span>   <span class="c1">// API name</span>
    <span class="n">DWORD</span> <span class="n">bpxType</span><span class="p">,</span>     <span class="c1">// UE_BREAKPOINT or UE_SINGLESHOOT</span>
    <span class="n">DWORD</span> <span class="n">bpxPlace</span><span class="p">,</span>    <span class="c1">// UE_APISTART or UE_APIEND</span>
    <span class="n">LPVOID</span> <span class="n">bpxCallBack</span> <span class="c1">// Callback function</span>
<span class="p">);</span>
</code></pre></div></div>

<p>For <code class="language-plaintext highlighter-rouge">VirtualAlloc</code> we need to set the breakpoint at return so we will use <code class="language-plaintext highlighter-rouge">UE_APIEND</code> as the <code class="language-plaintext highlighter-rouge">bpxPlace</code> value.</p>

<p>Next we do some logging and run the program.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// VirtualAlloc BP callback</span>
<span class="k">static</span> <span class="kt">void</span> <span class="nf">cbVirtualAlloc</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">mem_addr</span> <span class="o">=</span> <span class="n">Script</span><span class="o">::</span><span class="n">Register</span><span class="o">::</span><span class="n">GetCAX</span><span class="p">();</span>
    <span class="c1">// auto x = GetFunctionParameter(DbgGetProcessHandle(), UE_FUNCTION_STDCALL_RET, 2, UE_PARAMETER_DWORD);</span>
    <span class="n">mem_size</span> <span class="o">=</span> <span class="n">DbgEval</span><span class="p">(</span><span class="s">"arg.get(1)"</span><span class="p">);</span>

    <span class="n">_plugin_logprintf</span><span class="p">(</span><span class="s">"["</span> <span class="n">PLUGIN_NAME</span> <span class="s">"] VirtualAlloc addr: %x</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">mem_addr</span><span class="p">);</span>
    <span class="n">_plugin_logprintf</span><span class="p">(</span><span class="s">"["</span> <span class="n">PLUGIN_NAME</span> <span class="s">"] VirtualAlloc size: %x</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">mem_size</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>When reach the <code class="language-plaintext highlighter-rouge">VirtualAlloc</code> callback the allocated memory address would be stored at <code class="language-plaintext highlighter-rouge">EAX/RAX</code>, we can use the scriptapi register function <code class="language-plaintext highlighter-rouge">GetCAX</code> to read this value (remember x64dbg provides special registers for architecture-independent code).</p>

<p>To get the memory size stored at the second argument we can use <code class="language-plaintext highlighter-rouge">DbgEval</code> to evaluate <code class="language-plaintext highlighter-rouge">arg.get(1)</code> command and get its result.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// VirtualProtect BP callback</span>
<span class="k">static</span> <span class="kt">void</span> <span class="nf">cbVirtualProtect</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">auto</span> <span class="n">header</span> <span class="o">=</span> <span class="n">Script</span><span class="o">::</span><span class="n">Memory</span><span class="o">::</span><span class="n">ReadWord</span><span class="p">(</span><span class="n">mem_addr</span><span class="p">);</span>
    <span class="c1">// Check for MZ header</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">header</span> <span class="o">==</span> <span class="mh">0x5a4d</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">_plugin_logprintf</span><span class="p">(</span><span class="s">"["</span> <span class="n">PLUGIN_NAME</span> <span class="s">"] Found a PE file at addr: %x</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">mem_addr</span><span class="p">);</span>

        <span class="c1">// Build dumping path</span>
        <span class="kt">char</span> <span class="n">path</span><span class="p">[</span><span class="n">MAX_PATH</span><span class="p">];</span>
        <span class="n">Script</span><span class="o">::</span><span class="n">Module</span><span class="o">::</span><span class="n">GetMainModulePath</span><span class="p">(</span><span class="n">path</span><span class="p">);</span>
        <span class="n">sprintf</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="s">"%s</span><span class="se">\\</span><span class="s">memdump_%X_%zx_%zx.bin"</span><span class="p">,</span> <span class="n">getParentPath</span><span class="p">(</span><span class="n">path</span><span class="p">),</span> <span class="n">DbgGetProcessId</span><span class="p">(),</span> <span class="n">mem_addr</span><span class="p">,</span> <span class="n">mem_size</span><span class="p">);</span>

        <span class="c1">// Dump payload to disk</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">DumpMemory</span><span class="p">(</span><span class="n">DbgGetProcessHandle</span><span class="p">(),</span> <span class="p">(</span><span class="n">LPVOID</span><span class="p">)</span><span class="n">mem_addr</span><span class="p">,</span> <span class="n">mem_size</span><span class="p">,</span> <span class="n">path</span><span class="p">))</span>
            <span class="n">_plugin_logprintf</span><span class="p">(</span><span class="s">"["</span> <span class="n">PLUGIN_NAME</span> <span class="s">"] Dumped payload at %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">path</span><span class="p">);</span>
        <span class="k">else</span>
            <span class="n">fail</span><span class="p">(</span><span class="s">"Failed to dump the payload"</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>When we hit <code class="language-plaintext highlighter-rouge">VirtualProtect</code> we can read the first 2 bytes from the allocated memory address to check for the MZ header.</p>

<p>To build a dumping path similar to <code class="language-plaintext highlighter-rouge">:memdump:</code> from <code class="language-plaintext highlighter-rouge">savedata</code> command we need to get the current module path using <code class="language-plaintext highlighter-rouge">GetMainModulePath</code>, get the current process ID using <code class="language-plaintext highlighter-rouge">DbgGetProcessId</code> and append the memory address and size to them.</p>

<p>Finally to dump the payload to disk we can use <code class="language-plaintext highlighter-rouge">DumpMemory</code> passing it the current process handle using <code class="language-plaintext highlighter-rouge">DbgGetProcessHandle</code>, memory address, memory size and file path.</p>

<h2 id="trying-our-plugin">Trying our plugin</h2>

<p>After building the plugin we need to move the plugin files which end with <code class="language-plaintext highlighter-rouge">.dp32</code> or <code class="language-plaintext highlighter-rouge">.dp64</code> depending on the build configuration to <code class="language-plaintext highlighter-rouge">x64dbg\release\(x32|x64)\plugins</code>.</p>

<p>To load the the plugin we can restart x64dbg and it will be loaded automatically or just use <code class="language-plaintext highlighter-rouge">loadplugin</code> command passing it the plugin name like this <code class="language-plaintext highlighter-rouge">loadplugin EasyDump</code>.</p>

<p>Finally we can run <code class="language-plaintext highlighter-rouge">EasyDump</code> (the command we registered in <code class="language-plaintext highlighter-rouge">pluginInit</code>) and watch the magic happen…again.</p>

<p><a href="/assets/images/tutorials/x64dbg/plugins/2.png"><img src="/assets/images/tutorials/x64dbg/plugins/2.png" alt="2" /></a></p>

<p>source code: <a href="https://github.com/N1ght-W0lf/EasyDump">https://github.com/N1ght-W0lf/EasyDump</a></p>

<h3 id="updates">Updates</h3>

<blockquote>
  <p><strong>Some notes from <a href="https://twitter.com/mrexodia">Duncan Ogilvie @mrexodia</a></strong></p>

  <p>As a general rule I’d avoid using the TitanEngine APIs directly. They can cause some weird scenarios where x64dbg doesn’t know about a breakpoint for example. Unfortunately the plugin API isn’t very strong on this front though, so it’s a lot more work to do the same…</p>

  <p>Also something worth exploring is the C# scripting plugin: <a href="https://github.com/x64dbg/DotX64Dbg">https://github.com/x64dbg/DotX64Dbg</a></p>

  <p>And confusingly <code class="language-plaintext highlighter-rouge">DbgCmdExec</code> (queues a command asynchronously) causes a race condition in your example. Likely you want <code class="language-plaintext highlighter-rouge">DbgCmdExecDirect</code> instead (executed the implementation of the command directly)</p>
</blockquote>

<h2 id="final-words">Final words</h2>

<p>The goal of this tutorial was to learn more about x64dbg not write the best dumping plugin :)</p>

<p>This tutorial wouldn’t be possible without the help of the official x64dbg <a href="https://help.x64dbg.com/">docs</a> and <a href="https://x64dbg.com/blog/">blog</a>, you can check them out for more in depth info.</p>

<p>You can also find many cool x64dbg plugins <a href="https://github.com/x64dbg/x64dbg/wiki/Plugins">here</a> that can make your life easier.</p>

<p>Special thanks to <a href="https://twitter.com/mrexodia">@mrexodia</a> (creator of x64dbg and many other projects) for his awesome work, you can support him <a href="https://github.com/sponsors/mrexodia">here</a>.</p>

<p>I hope you learned something new, until next time.</p>]]></content><author><name>Zakariae El bouzarazi</name></author><category term="Tutorials" /><summary type="html"><![CDATA[In the previous post we talked about writing x64dbg scripts, now let's dive deeper and write our own plugin to do the same...]]></summary></entry><entry><title type="html">Writing x64dbg scripts</title><link href="http://localhost:4000/tutorials/writing-x64dbg-scripts/" rel="alternate" type="text/html" title="Writing x64dbg scripts" /><published>2022-12-16T00:00:00+01:00</published><updated>2022-12-16T00:00:00+01:00</updated><id>http://localhost:4000/tutorials/writing-x64dbg-scripts</id><content type="html" xml:base="http://localhost:4000/tutorials/writing-x64dbg-scripts/"><![CDATA[<p>x64dbg is an open-source x64/x32 debugger for windows, it has dozens of features that make the life of reverse engineers and malware analysts easier.</p>

<p>One of the coolest features of x64dbg is that it’s extendable, it comes with a debuggable scripting language and a software development kit for writing your own plugins.</p>

<p>In this post we will talk about x64dbg scripting and in the <a href="https://n1ght-w0lf.github.io/tutorials/writing-x64dbg-plugins">next one</a> we will talk about plugins.</p>

<p>Scripts are just a sequence of commands, you can see all the available commands <a href="https://help.x64dbg.com/en/latest/commands/index.html">here</a>.</p>

<p>To execute a command you can simply type it in the command prompt and check the result in the <code class="language-plaintext highlighter-rouge">Log</code> window.</p>

<p><a href="/assets/images/tutorials/x64dbg/scripting/1.png"><img src="/assets/images/tutorials/x64dbg/scripting/1.png" alt="1" /></a></p>

<p>For this tutorial we will write a simple script to automatically dump unpacked PE payloads in memory.</p>

<p>The unpacking workflow (how I usually do it) is to set a breakpoint at <code class="language-plaintext highlighter-rouge">VirtualAlloc</code> and <code class="language-plaintext highlighter-rouge">VirtualProtect</code>, run the program and follow the memory allocations in dump waiting for the MZ header to appear then dump that memory region. Let’s use the power of scripting to automate this process.</p>

<p>First we will define two variables to hold the address and size of allocated memory regions using <code class="language-plaintext highlighter-rouge">var</code> command.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">var</span> <span class="n">mem_addr</span>
<span class="n">var</span> <span class="n">mem_size</span>
</code></pre></div></div>

<p>Next we can set our breakpoints.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">bp</span> <span class="n">VirtualAlloc</span>
<span class="n">SetBreakpointCommand</span> <span class="n">VirtualAlloc</span><span class="p">,</span> <span class="s">"scriptcmd call cb_virtual_alloc"</span>

<span class="n">bp</span> <span class="n">VirtualProtect</span>
<span class="n">SetBreakpointCommand</span> <span class="n">VirtualProtect</span><span class="p">,</span> <span class="s">"scriptcmd call cb_virtual_protect"</span>
</code></pre></div></div>

<p>We can use <code class="language-plaintext highlighter-rouge">SetBreakpointCommand</code> to set a command to execute when the breakpoint is hit.</p>

<p>The command we need here is <code class="language-plaintext highlighter-rouge">call</code> which will jump to a callback function defined by a label, we also have to use <code class="language-plaintext highlighter-rouge">scriptcmd</code> to execute the call in the context of a running script (not in the context of the debugging loop).</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">cb_virtual_alloc:</span>
    <span class="n">rtr</span>
    <span class="n">set</span> <span class="n">mem_addr</span><span class="p">,</span> <span class="n">cax</span>
    <span class="n">log</span> <span class="s">"Allocated memory address: {x:mem_addr}"</span>
    <span class="n">set</span> <span class="n">mem_size</span><span class="p">,</span> <span class="n">arg</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="n">log</span> <span class="s">"Allocated memory size: {x:mem_size}"</span>
</code></pre></div></div>

<p>When we reach this callback we first need to use <code class="language-plaintext highlighter-rouge">rtr</code> command (run till return) to let <code class="language-plaintext highlighter-rouge">VirtualAlloc</code> does the memory allocation.</p>

<p>Next we can get the returned memory address stored at <code class="language-plaintext highlighter-rouge">eax/rax</code> and store that value in <code class="language-plaintext highlighter-rouge">mem_addr</code> variable.</p>

<p>x64dbg provides the following registers: <code class="language-plaintext highlighter-rouge">cax</code> , <code class="language-plaintext highlighter-rouge">cbx</code> , <code class="language-plaintext highlighter-rouge">ccx</code> , <code class="language-plaintext highlighter-rouge">cdx</code> , <code class="language-plaintext highlighter-rouge">csp</code> , <code class="language-plaintext highlighter-rouge">cbp</code> , <code class="language-plaintext highlighter-rouge">csi</code> , <code class="language-plaintext highlighter-rouge">cdi</code> , <code class="language-plaintext highlighter-rouge">cip</code> which are mapped to 32-bit registers on a 32-bit platform, and to 64-bit registers on a 64-bit platform. This gives you the ability to write architecture-independent code, so we will use <code class="language-plaintext highlighter-rouge">cax</code> to get the return value.</p>

<p>As all good developers know the best debugging technique is print-based debugging :)</p>

<p>So we can use the <code class="language-plaintext highlighter-rouge">log</code> command to print some logging messages.</p>

<p>The <code class="language-plaintext highlighter-rouge">log</code> command takes one argument which is a format string, you can read about the string formatter <a href="https://help.x64dbg.com/en/latest/introduction/Formatting.html">here</a>. We only need the basic syntax which is <code class="language-plaintext highlighter-rouge">{?:expression}</code> where <code class="language-plaintext highlighter-rouge">?</code> is the optional type of the expression (<code class="language-plaintext highlighter-rouge">x</code> for hex value).</p>

<p>Next we need to get the size of the allocated memory which is passed to <code class="language-plaintext highlighter-rouge">VirtualAlloc</code> as the second argument.</p>

<p>To get an argument at a given index we can use the expression function <code class="language-plaintext highlighter-rouge">arg.get(index)</code> which gets the argument at a given index (zero-based). Note that you should be inside the function boundaries to get the correct value.</p>

<p>With that done let’s define the next callback.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">cb_virtual_protect:</span>
    <span class="n">log</span> <span class="s">"New protection: {x:arg.get(2)}"</span>
    <span class="n">cmp</span> <span class="n">word</span><span class="p">(</span><span class="n">mem_addr</span><span class="p">),</span> <span class="mi">5</span><span class="n">a4d</span>
    <span class="n">jne</span> <span class="n">main</span>
    <span class="n">savedata</span> <span class="o">:</span><span class="n">memdump</span><span class="o">:</span><span class="p">,</span> <span class="n">mem_addr</span><span class="p">,</span> <span class="n">mem_size</span>
</code></pre></div></div>

<p>First we log the third argument of <code class="language-plaintext highlighter-rouge">VirtualProtect</code> which is the new memory protection, this can be used to check for protection changes which might indicate unpacking but we won’t use it here.</p>

<p>Next we use another expression function <code class="language-plaintext highlighter-rouge">word</code> to read the first 2 bytes from the previously allocated memory address and compare them to <code class="language-plaintext highlighter-rouge">0x5a4d</code> (the MZ header). Note that all numbers are interpreted as hex by default.</p>

<p>If the check is false we jump to the <code class="language-plaintext highlighter-rouge">main</code> label and continue execution, if not we save that memory region to disk.</p>

<p>The first argument of <code class="language-plaintext highlighter-rouge">savedata</code> command is the filename, if we use <code class="language-plaintext highlighter-rouge">:memdump:</code> as a name it will save the file as <code class="language-plaintext highlighter-rouge">memdump_pid_addr_size.bin</code> in the x64dbg directory.</p>

<p>Finally we use <code class="language-plaintext highlighter-rouge">run</code> command to run the program and watch the magic happen. you can use <code class="language-plaintext highlighter-rouge">Tab</code> to step into the script or <code class="language-plaintext highlighter-rouge">Space</code> to run the script.</p>

<video src="https://user-images.githubusercontent.com/58216643/208249322-502985c8-fb2a-4571-af57-a39b0b44eca8.mp4" controls="controls" style="max-width: 730px;"></video>

<p>Simple as that.</p>

<p>Full script:</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// define a variable to hold allocated mem address</span>
<span class="n">var</span> <span class="n">mem_addr</span>
<span class="c1">// define a variable to hold allocated mem size</span>
<span class="n">var</span> <span class="n">mem_size</span>

<span class="c1">// set breakpoint on VirtualAlloc</span>
<span class="n">bp</span> <span class="n">VirtualAlloc</span>
<span class="c1">// set callback on breakpoint hit</span>
<span class="n">SetBreakpointCommand</span> <span class="n">VirtualAlloc</span><span class="p">,</span> <span class="s">"scriptcmd call cb_virtual_alloc"</span>
<span class="c1">// set breakpoint on VirtualProtect</span>
<span class="n">bp</span> <span class="n">VirtualProtect</span>
<span class="c1">// set callback on breakpoint hit</span>
<span class="n">SetBreakpointCommand</span> <span class="n">VirtualProtect</span><span class="p">,</span> <span class="s">"scriptcmd call cb_virtual_protect"</span>

<span class="c1">// go to main label</span>
<span class="k">goto</span> <span class="n">main</span>

<span class="c1">// define VirtualAlloc callback label</span>
<span class="n">cb_virtual_alloc</span><span class="o">:</span>
    <span class="c1">// run until return (stepout)</span>
    <span class="n">rtr</span>
    <span class="c1">// set mem_addr value to cax value (return value)</span>
    <span class="n">set</span> <span class="n">mem_addr</span><span class="p">,</span> <span class="n">cax</span>
    <span class="c1">// log memory address</span>
    <span class="n">log</span> <span class="s">"Allocated memory address: {x:mem_addr}"</span>
    <span class="c1">// set mem_size value to VirtualAlloc's second arg value (region size)</span>
    <span class="n">set</span> <span class="n">mem_size</span><span class="p">,</span> <span class="n">arg</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="c1">// log memory size</span>
    <span class="n">log</span> <span class="s">"Allocated memory size: {x:mem_size}"</span>
    <span class="c1">// go to main label</span>
    <span class="k">goto</span> <span class="n">main</span>

<span class="c1">// define VirtualProtect callback label</span>
<span class="n">cb_virtual_protect</span><span class="o">:</span>
    <span class="c1">// log VirtualProtect's second arg value (new protection)</span>
    <span class="n">log</span> <span class="s">"New protection: {x:arg.get(2)}"</span>
    <span class="c1">// compare the first 2 bytes at mem_addr address to "MZ"</span>
    <span class="n">cmp</span> <span class="n">word</span><span class="p">(</span><span class="n">mem_addr</span><span class="p">),</span> <span class="mi">5</span><span class="n">a4d</span>
    <span class="c1">// if not equal, jump to main label</span>
    <span class="n">jne</span> <span class="n">main</span>
    <span class="c1">// dump data at mem_addr address to disk</span>
    <span class="n">savedata</span> <span class="o">:</span><span class="n">memdump</span><span class="o">:</span><span class="p">,</span> <span class="n">mem_addr</span><span class="p">,</span> <span class="n">mem_size</span>

<span class="c1">// define main label</span>
<span class="n">main</span><span class="o">:</span>
    <span class="c1">// run the program</span>
    <span class="n">run</span>

<span class="c1">// end the script</span>
<span class="n">ret</span>
</code></pre></div></div>]]></content><author><name>Zakariae El bouzarazi</name></author><category term="Tutorials" /><summary type="html"><![CDATA[x64dbg is an open-source x64/x32 debugger for windows, it has dozens of features that make the life of reverse engineers and malware...]]></summary></entry><entry><title type="html">YARA for config extraction</title><link href="http://localhost:4000/tutorials/yara-for-config-extraction/" rel="alternate" type="text/html" title="YARA for config extraction" /><published>2022-08-08T00:00:00+01:00</published><updated>2022-08-08T00:00:00+01:00</updated><id>http://localhost:4000/tutorials/yara-for-config-extraction</id><content type="html" xml:base="http://localhost:4000/tutorials/yara-for-config-extraction/"><![CDATA[<p>YARA is a tool aimed at helping malware researchers to identify and classify malware samples. It’s considered to be the pattern matching swiss knife for malware researchers.</p>

<p>If you are not familiar with writing YARA rules, the <a href="https://yara.readthedocs.io/en/stable/index.html">official docs</a> would be a great start.</p>

<p>In this blog I will go through how YARA rules can be used for malware config extraction.</p>

<p>YARA has come a long way since its original release and it now has some awesome modules for writing better and more complex rules.</p>

<h2 id="what-is-a-yara-module">What is a YARA module</h2>

<p>A YARA module is like a plugin for extending YARA features, it allows you to define data structures and functions which can be used in your rules.</p>

<p>To use a YARA module you simply import it using <code class="language-plaintext highlighter-rouge">import "module_name"</code>, you can refer to the docs to learn about the available functions of each module.</p>

<p>Example:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="dl">"</span><span class="s2">pe</span><span class="dl">"</span>

<span class="nx">rule</span> <span class="nx">test</span> <span class="p">{</span>
    <span class="nl">condition</span><span class="p">:</span>
        <span class="nx">pe</span><span class="p">.</span><span class="nx">number_of_sections</span> <span class="o">==</span> <span class="mi">1</span>
<span class="p">}</span>
</code></pre></div></div>

<p>With that said let’s now jump into malware land, I will demonstrate on two variants of <a href="https://malpedia.caad.fkie.fraunhofer.de/details/win.redline_stealer">RedLine Stealer</a> which is a very popular dotnet stealer.</p>

<h2 id="redline-stealer-variant1">RedLine Stealer Variant1</h2>

<p>The first variant stores the config in plaintext, we are only interested in two fields (C2 and BotnetID).</p>

<p><a href="/assets/images/tutorials/yara/1.png"><img src="/assets/images/tutorials/yara/1.png" alt="1" /></a></p>

<p>To read these fields we need to understand how <a href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldstr?view=net-6.0">ldstr</a> instruction works. The instruction’s opcode is <code class="language-plaintext highlighter-rouge">0x72</code> followed by 4 bytes which represent the string token.</p>

<blockquote>
  <p>A token is a DWORD value that represents a table and an index into that table. For example, the EntryPointToken 0x0600002C, references table 0x06 (MethodDef) and its row 0x2C. The table index is 1 byte and the row index is 3 bytes.</p>
</blockquote>

<p>In the following instruction for example, the string token is <code class="language-plaintext highlighter-rouge">0x7000067B</code> (little-endian) and the row index is <code class="language-plaintext highlighter-rouge">0x67B</code>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>727B060070   // ldstr "87.251.71.4:80"
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">dotnet</code> module already has the functionality to retrieve all user strings from a dotnet sample.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="dl">"</span><span class="s2">dotnet</span><span class="dl">"</span>
<span class="k">import</span> <span class="dl">"</span><span class="s2">console</span><span class="dl">"</span>

<span class="nx">rule</span> <span class="nx">Test</span> <span class="p">{</span>
    <span class="nl">condition</span><span class="p">:</span>
        <span class="k">for</span> <span class="nx">all</span> <span class="nx">i</span> <span class="k">in</span> <span class="p">(</span><span class="mi">0</span><span class="p">..</span><span class="nx">dotnet</span><span class="p">.</span><span class="nx">number_of_user_strings</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span> <span class="p">(</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">dotnet</span><span class="p">.</span><span class="nx">user_strings</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span>
        <span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p><a href="/assets/images/tutorials/yara/2.png"><img src="/assets/images/tutorials/yara/2.png" alt="2" /></a></p>

<blockquote>
  <p>Notice that I used <code class="language-plaintext highlighter-rouge">sed</code> to remove null characters because dotnet user strings are stored as an array of unicode strings.</p>

</blockquote>

<p>This is cool but we need to get the user strings using the row index from the string token.</p>

<p>To achieve this we need to make a couple of changes to the <code class="language-plaintext highlighter-rouge">dotnet</code> module source file at <code class="language-plaintext highlighter-rouge">libyara/modules/dotnet/dotnet.c</code>.</p>

<p><a href="/assets/images/tutorials/yara/3.png"><img src="/assets/images/tutorials/yara/3.png" alt="3" /></a></p>

<p><a href="/assets/images/tutorials/yara/4.png"><img src="/assets/images/tutorials/yara/4.png" alt="4" /></a></p>

<p>This will index the user strings array by row index (offset from the start of the strings table).</p>

<p>To compile and install yara you need to run these two scripts for the first time only:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ ./bootstrap.sh
$ ./configure
</code></pre></div></div>

<p>Then you build YARA with your changes:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ make
$ sudo make install
</code></pre></div></div>

<p>We can now write a simple rule to read the config fields.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="dl">"</span><span class="s2">dotnet</span><span class="dl">"</span>
<span class="k">import</span> <span class="dl">"</span><span class="s2">console</span><span class="dl">"</span>

<span class="nx">rule</span> <span class="nx">Redline</span> <span class="p">{</span>
    <span class="nl">strings</span><span class="p">:</span>
        <span class="nx">$get_conf_v1</span> <span class="o">=</span> <span class="p">{</span>
            <span class="mi">72</span> <span class="o">??</span> <span class="o">??</span> <span class="o">??</span> <span class="mi">70</span>      <span class="c1">// IL_0000: ldstr     "87.251.71.4:80"</span>
            <span class="mi">80</span> <span class="o">??</span> <span class="o">??</span> <span class="o">??</span> <span class="mi">04</span>      <span class="c1">// IL_0005: stsfld    &lt;IP&gt;</span>
            <span class="mi">72</span> <span class="o">??</span> <span class="o">??</span> <span class="o">??</span> <span class="mi">70</span>      <span class="c1">// IL_000A: ldstr     "lyla"</span>
            <span class="mi">80</span> <span class="o">??</span> <span class="o">??</span> <span class="o">??</span> <span class="mi">04</span>      <span class="c1">// IL_000F: stsfld    &lt;ID&gt;</span>
            <span class="mi">72</span> <span class="o">??</span> <span class="o">??</span> <span class="o">??</span> <span class="mi">70</span>      <span class="c1">// IL_0014: ldstr     ""</span>
            <span class="mi">28</span> <span class="o">??</span> <span class="o">??</span> <span class="o">??</span> <span class="o">??</span>      <span class="c1">// IL_0019: call      set_Message(string)</span>
            <span class="mi">2</span><span class="nx">A</span>                  <span class="c1">// IL_001E: ret</span>
        <span class="p">}</span>

    <span class="nl">condition</span><span class="p">:</span>
        <span class="nx">$get_conf_v1</span>
        <span class="nx">and</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">[+] C2: </span><span class="dl">"</span><span class="p">,</span>
            <span class="nx">dotnet</span><span class="p">.</span><span class="nx">user_strings</span><span class="p">[</span><span class="nx">int32</span><span class="p">(@</span><span class="nd">get_conf_v1</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xffffff</span><span class="p">]</span>
        <span class="p">)</span>
        <span class="nx">and</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">[+] Botnet: </span><span class="dl">"</span><span class="p">,</span>
            <span class="nx">dotnet</span><span class="p">.</span><span class="nx">user_strings</span><span class="p">[</span><span class="nx">int32</span><span class="p">(@</span><span class="nd">get_conf_v1</span><span class="o">+</span><span class="mi">11</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xffffff</span><span class="p">]</span>
        <span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<blockquote>
  <ul>
    <li><code class="language-plaintext highlighter-rouge">@get_conf_v1</code>: address of the first match of <code class="language-plaintext highlighter-rouge">$get_conf_v1</code></li>
    <li><code class="language-plaintext highlighter-rouge">int32</code>: reads 4 bytes (string token) from an offset, I used <code class="language-plaintext highlighter-rouge">0xffffff</code> bit mask to only get the row index.</li>
  </ul>
</blockquote>

<p><a href="/assets/images/tutorials/yara/5.png"><img src="/assets/images/tutorials/yara/5.png" alt="5" /></a></p>

<p>Cool, Let’s move to the second variant.</p>

<h2 id="redline-stealer-variant2">RedLine Stealer Variant2</h2>

<p>This variant stores the config in an encrypted form.</p>

<p><a href="/assets/images/tutorials/yara/6.png"><img src="/assets/images/tutorials/yara/6.png" alt="6" /></a></p>

<p>The decryption algorithm looks as follows:</p>

<p><a href="/assets/images/tutorials/yara/7.png"><img src="/assets/images/tutorials/yara/7.png" alt="7" /></a></p>

<p>Currently YARA doesn’t have a module to do <code class="language-plaintext highlighter-rouge">base64</code> and <code class="language-plaintext highlighter-rouge">xor</code> operations in conditions, so why not write our own module :)</p>

<h2 id="writing-our-own-yara-module">Writing our own YARA module</h2>

<p>Modules are written in C and built into YARA as part of the compiling process.</p>

<p>I will explain briefly how to write a YARA module, for more details refer to the <a href="https://yara.readthedocs.io/en/stable/writingmodules.html">official docs</a>.</p>

<p>YARA modules reside in <code class="language-plaintext highlighter-rouge">libyara/modules</code>, it’s recommended to use the module name as the file name for the source file. Here I created a new module directory named <code class="language-plaintext highlighter-rouge">malutils</code> and inside it is the source file named <code class="language-plaintext highlighter-rouge">malutils.c</code>, now let’s go through the source code.</p>

<p>First we need to include the required headers to be able to use YARA’s module API.</p>

<p><a href="/assets/images/tutorials/yara/8.png"><img src="/assets/images/tutorials/yara/8.png" alt="8" /></a></p>

<p>Next we define the required functions:</p>

<ul>
  <li>Xor decryption function which takes a buffer and a key and returns the decrypted string buffer.</li>
</ul>

<p><a href="/assets/images/tutorials/yara/9.png"><img src="/assets/images/tutorials/yara/9.png" alt="9" /></a></p>

<ul>
  <li>Base64 decoding function which takes a base64 encoded string and returns the decoded value.</li>
</ul>

<p><a href="/assets/images/tutorials/yara/10.png"><img src="/assets/images/tutorials/yara/10.png" alt="10" /></a></p>

<ul>
  <li>Helper function to convert dotnet user strings from wide to ascii.</li>
</ul>

<p><a href="/assets/images/tutorials/yara/11.png"><img src="/assets/images/tutorials/yara/11.png" alt="11" /></a></p>

<p>Then comes the declaration section where we declare the functions and data structures that will be available for our YARA rules.</p>

<p><a href="/assets/images/tutorials/yara/12.png"><img src="/assets/images/tutorials/yara/12.png" alt="12" /></a></p>

<p>After that we have 2 pairs of functions, the first pair is <code class="language-plaintext highlighter-rouge">module_initialize</code> &amp; <code class="language-plaintext highlighter-rouge">module_finalize</code>.</p>

<p>These functions allow you to initialize and finalize any global data structure you may need to use in your module, and both functions are invoked whether or not the module is being imported by some rule.</p>

<p><a href="/assets/images/tutorials/yara/13.png"><img src="/assets/images/tutorials/yara/13.png" alt="13" /></a></p>

<p>The second pair is <code class="language-plaintext highlighter-rouge">module_load</code> &amp; <code class="language-plaintext highlighter-rouge">module_unload</code>.</p>

<p>The <code class="language-plaintext highlighter-rouge">module_load</code> function is invoked once for each scanned file (only if the module is imported in your rule). It’s is where your module can inspect the file being scanned, parse or analyze it in the way preferred, and then populate the data structures defined in the declarations section.</p>

<p>For each call to <code class="language-plaintext highlighter-rouge">module_load</code> there is a corresponding call to <code class="language-plaintext highlighter-rouge">module_unload</code>. This function allows your module to free any resource allocated during <code class="language-plaintext highlighter-rouge">module_load</code>.</p>

<p><a href="/assets/images/tutorials/yara/14.png"><img src="/assets/images/tutorials/yara/14.png" alt="14" /></a></p>

<h2 id="final-touches">Final Touches</h2>

<p>Before we test our module there’s a nasty bug we need to take care of.</p>

<p>When writing a YARA module, instead of using the C <em>return</em> statement in your declared functions you must use <code class="language-plaintext highlighter-rouge">return_string(x)</code>, <code class="language-plaintext highlighter-rouge">return_integer(x)</code> or <code class="language-plaintext highlighter-rouge">return_float(x)</code> to return from a function.</p>

<p>The problem occurs when we return from <code class="language-plaintext highlighter-rouge">base64d</code> function, the decoded string might contain null bytes so <code class="language-plaintext highlighter-rouge">return_string</code> won’t return the full buffer.</p>

<p>As you can see below, <code class="language-plaintext highlighter-rouge">return_string</code> uses <code class="language-plaintext highlighter-rouge">strlen</code> to determine the length of the returned string so it will stop at the first null byte.</p>

<p><a href="/assets/images/tutorials/yara/15.png"><img src="/assets/images/tutorials/yara/15.png" alt="15" /></a></p>

<p>As a workaround, I defined a new return macro called <code class="language-plaintext highlighter-rouge">return_sized_string</code> which enables us to set the length of the returned string rather than relying on <code class="language-plaintext highlighter-rouge">strlen</code>.</p>

<p><a href="/assets/images/tutorials/yara/16.png"><img src="/assets/images/tutorials/yara/16.png" alt="16" /></a></p>

<h2 id="building-our-module">Building our module</h2>

<p>To include our module in the compiling process of YARA we must follow two further steps:</p>

<ul>
  <li>Add our module name to the module_list at <code class="language-plaintext highlighter-rouge">libyara/modules/module_list</code></li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>MODULE(malutils)
</code></pre></div></div>

<ul>
  <li>Add our module source file to the must compiled modules at <code class="language-plaintext highlighter-rouge">libyara/Makefile.am</code></li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>MODULES += modules/malutils/malutils.c
</code></pre></div></div>

<p>Finally we build YARA with our module:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ make
$ sudo make install
</code></pre></div></div>

<p>With everything in place, let’s now test our module.</p>

<h2 id="testing-our-module">Testing our module</h2>

<p>Below is the final YARA rule that handles both RedLine variants.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="dl">"</span><span class="s2">dotnet</span><span class="dl">"</span>
<span class="k">import</span> <span class="dl">"</span><span class="s2">console</span><span class="dl">"</span>
<span class="k">import</span> <span class="dl">"</span><span class="s2">malutils</span><span class="dl">"</span>

<span class="nx">rule</span> <span class="nx">Redline</span> <span class="p">{</span>
    <span class="nl">meta</span><span class="p">:</span>
        <span class="nx">date</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">2022-08-08</span><span class="dl">"</span>
        <span class="nx">author</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Abdallah 'n1ghtw0lf' Elshinbary</span><span class="dl">"</span>
        <span class="nx">description</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Extracts Redline config (educational)</span><span class="dl">"</span>

    <span class="nx">strings</span><span class="p">:</span>
        <span class="nx">$get_conf_v1</span> <span class="o">=</span> <span class="p">{</span>
            <span class="mi">72</span> <span class="o">??</span> <span class="o">??</span> <span class="o">??</span> <span class="mi">70</span>      <span class="c1">// IL_0000: ldstr     "87.251.71.4:80"</span>
            <span class="mi">80</span> <span class="o">??</span> <span class="o">??</span> <span class="o">??</span> <span class="mi">04</span>      <span class="c1">// IL_0005: stsfld    &lt;IP&gt;</span>
            <span class="mi">72</span> <span class="o">??</span> <span class="o">??</span> <span class="o">??</span> <span class="mi">70</span>      <span class="c1">// IL_000A: ldstr     "lyla"</span>
            <span class="mi">80</span> <span class="o">??</span> <span class="o">??</span> <span class="o">??</span> <span class="mi">04</span>      <span class="c1">// IL_000F: stsfld    &lt;ID&gt;</span>
            <span class="mi">72</span> <span class="o">??</span> <span class="o">??</span> <span class="o">??</span> <span class="mi">70</span>      <span class="c1">// IL_0014: ldstr     ""</span>
            <span class="mi">28</span> <span class="o">??</span> <span class="o">??</span> <span class="o">??</span> <span class="o">??</span>      <span class="c1">// IL_0019: call      set_Message(string)</span>
            <span class="mi">2</span><span class="nx">A</span>                  <span class="c1">// IL_001E: ret</span>
        <span class="p">}</span>
        <span class="nx">$get_conf_v2</span> <span class="o">=</span> <span class="p">{</span>
            <span class="mi">72</span> <span class="o">??</span> <span class="o">??</span> <span class="o">??</span> <span class="mi">70</span>      <span class="c1">// IL_0000: ldstr     "CyYOXysPAwUnB1NQCxtdWioxKUInBC5QCDNUUw=="</span>
            <span class="mi">80</span> <span class="o">??</span> <span class="o">??</span> <span class="o">??</span> <span class="mi">04</span>      <span class="c1">// IL_0005: stsfld    &lt;IP&gt;</span>
            <span class="mi">72</span> <span class="o">??</span> <span class="o">??</span> <span class="o">??</span> <span class="mi">70</span>      <span class="c1">// IL_000A: ldstr     "FzcNJDEOEDw7O1Y/FEM/IQ=="</span>
            <span class="mi">80</span> <span class="o">??</span> <span class="o">??</span> <span class="o">??</span> <span class="mi">04</span>      <span class="c1">// IL_000F: stsfld    &lt;ID&gt;</span>
            <span class="mi">72</span> <span class="o">??</span> <span class="o">??</span> <span class="o">??</span> <span class="mi">70</span>      <span class="c1">// IL_0014: ldstr     ""</span>
            <span class="mi">80</span> <span class="o">??</span> <span class="o">??</span> <span class="o">??</span> <span class="mi">04</span>      <span class="c1">// IL_0019: stsfld    &lt;Message&gt;</span>
            <span class="mi">72</span> <span class="o">??</span> <span class="o">??</span> <span class="o">??</span> <span class="mi">70</span>      <span class="c1">// IL_001E: ldstr     "Baying"</span>
            <span class="mi">80</span> <span class="o">??</span> <span class="o">??</span> <span class="o">??</span> <span class="mi">04</span>      <span class="c1">// IL_0023: stsfld    &lt;Key&gt;</span>
        <span class="p">}</span>

    <span class="nl">condition</span><span class="p">:</span>
        <span class="nx">dotnet</span><span class="p">.</span><span class="nx">is_dotnet</span> <span class="nx">and</span>
        <span class="p">(</span>
          <span class="p">(</span>
            <span class="nx">$get_conf_v1</span>
            <span class="nx">and</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">[+] C2: </span><span class="dl">"</span><span class="p">,</span>
              <span class="nx">malutils</span><span class="p">.</span><span class="nx">wtoa</span><span class="p">(</span><span class="nx">dotnet</span><span class="p">.</span><span class="nx">user_strings</span><span class="p">[</span><span class="nx">int32</span><span class="p">(@</span><span class="nd">get_conf_v1</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xffffff</span><span class="p">])</span>
            <span class="p">)</span>
            <span class="nx">and</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">[+] Botnet: </span><span class="dl">"</span><span class="p">,</span>
              <span class="nx">malutils</span><span class="p">.</span><span class="nx">wtoa</span><span class="p">(</span><span class="nx">dotnet</span><span class="p">.</span><span class="nx">user_strings</span><span class="p">[</span><span class="nx">int32</span><span class="p">(@</span><span class="nd">get_conf_v1</span><span class="o">+</span><span class="mi">11</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xffffff</span><span class="p">])</span>
            <span class="p">)</span>
          <span class="p">)</span>
          <span class="nx">or</span>
          <span class="p">(</span>
            <span class="nx">$get_conf_v2</span>
            <span class="nx">and</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">[+] C2: </span><span class="dl">"</span><span class="p">,</span>
              <span class="nx">malutils</span><span class="p">.</span><span class="nx">base64d</span><span class="p">(</span>
                <span class="nx">malutils</span><span class="p">.</span><span class="nx">xord</span><span class="p">(</span>
                  <span class="nx">malutils</span><span class="p">.</span><span class="nx">base64d</span><span class="p">(</span>
                    <span class="nx">malutils</span><span class="p">.</span><span class="nx">wtoa</span><span class="p">(</span><span class="nx">dotnet</span><span class="p">.</span><span class="nx">user_strings</span><span class="p">[</span><span class="nx">int32</span><span class="p">(@</span><span class="nd">get_conf_v2</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xffffff</span><span class="p">])</span>    <span class="c1">// enc c2</span>
                  <span class="p">),</span> <span class="nx">malutils</span><span class="p">.</span><span class="nx">wtoa</span><span class="p">(</span><span class="nx">dotnet</span><span class="p">.</span><span class="nx">user_strings</span><span class="p">[</span><span class="nx">int32</span><span class="p">(@</span><span class="nd">get_conf_v2</span><span class="o">+</span><span class="mi">31</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xffffff</span><span class="p">])</span>  <span class="c1">// xor key</span>
                <span class="p">)</span>
              <span class="p">)</span>
            <span class="p">)</span>
            <span class="nx">and</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">[+] Botnet: </span><span class="dl">"</span><span class="p">,</span>
              <span class="nx">malutils</span><span class="p">.</span><span class="nx">base64d</span><span class="p">(</span>
                <span class="nx">malutils</span><span class="p">.</span><span class="nx">xord</span><span class="p">(</span>
                  <span class="nx">malutils</span><span class="p">.</span><span class="nx">base64d</span><span class="p">(</span>
                    <span class="nx">malutils</span><span class="p">.</span><span class="nx">wtoa</span><span class="p">(</span><span class="nx">dotnet</span><span class="p">.</span><span class="nx">user_strings</span><span class="p">[</span><span class="nx">int32</span><span class="p">(@</span><span class="nd">get_conf_v2</span><span class="o">+</span><span class="mi">11</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xffffff</span><span class="p">])</span>   <span class="c1">// enc botnet</span>
                  <span class="p">),</span> <span class="nx">malutils</span><span class="p">.</span><span class="nx">wtoa</span><span class="p">(</span><span class="nx">dotnet</span><span class="p">.</span><span class="nx">user_strings</span><span class="p">[</span><span class="nx">int32</span><span class="p">(@</span><span class="nd">get_conf_v2</span><span class="o">+</span><span class="mi">31</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xffffff</span><span class="p">])</span>  <span class="c1">// xor key</span>
                <span class="p">)</span>
              <span class="p">)</span>
            <span class="p">)</span>
            <span class="nx">and</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">[+] Key: </span><span class="dl">"</span><span class="p">,</span>
              <span class="nx">malutils</span><span class="p">.</span><span class="nx">wtoa</span><span class="p">(</span><span class="nx">dotnet</span><span class="p">.</span><span class="nx">user_strings</span><span class="p">[</span><span class="nx">int32</span><span class="p">(@</span><span class="nd">get_conf_v2</span><span class="o">+</span><span class="mi">31</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xffffff</span><span class="p">])</span>
            <span class="p">)</span>
          <span class="p">)</span>
        <span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Running the rule on a list of samples produces the following output:</p>

<p><a href="/assets/images/tutorials/yara/17.png"><img src="/assets/images/tutorials/yara/17.png" alt="17" /></a></p>

<p>Beautiful right!</p>

<p>You can pull the code and try it yourself at 
<a href="https://github.com/N1ght-W0lf/yara/tree/malutils">https://github.com/N1ght-W0lf/yara/tree/malutils</a>.</p>

<p>It was just for learning purposes so not the best code :)</p>

<h2 id="samples">Samples</h2>

<p>fed976b2d134008fd6daec8edc00099935df756beb721034f71db33e4d675a6e
e4f7246b103d9bda3a7604bea12dc5ac1064764c0f3691617c9829c4e5d469b5
2d3503d8540e319851a67e55f06ed9e5ba060e821eec6dbc83960a5947ad1310
a8c498f5129af0229081edf1e535ac9dab6ad568befcbcecbfc7cc4c61e0a8eb
c19938f0b9648dc1f6b95d0e767164da832b9a92f8128ab47dcb81c5e1ceb31a
e94d48e09cace8937941fbf81d1a466fa2b2b6acfd0d6142fc3443c70e067294
f343005539a589ec5512559e0bdc824c1069196ae39d519e5b1f3257f4a6660b</p>

<h2 id="references">References</h2>

<p><a href="https://yara.readthedocs.io/en/stable/index.html">https://yara.readthedocs.io/en/stable/index.html</a></p>

<p><a href="https://www.ntcore.com/files/dotnetformat.htm">https://www.ntcore.com/files/dotnetformat.htm</a></p>]]></content><author><name>Zakariae El bouzarazi</name></author><category term="Tutorials" /><summary type="html"><![CDATA[YARA is a tool aimed at helping malware researchers to identify and classify malware samples. It's considered...]]></summary></entry><entry><title type="html">Qiling For Malware Analysis: Part 2</title><link href="http://localhost:4000/tutorials/qiling-for-malware-analysis-part-2/" rel="alternate" type="text/html" title="Qiling For Malware Analysis: Part 2" /><published>2020-07-25T00:00:00+01:00</published><updated>2020-07-25T00:00:00+01:00</updated><id>http://localhost:4000/tutorials/qiling-for-malware-analysis-part-2</id><content type="html" xml:base="http://localhost:4000/tutorials/qiling-for-malware-analysis-part-2/"><![CDATA[<p>In the first part we talked about the basics of Qiling, you can find it <a href="https://n1ght-w0lf.github.io/tutorials/qiling-for-malware-analysis-part-1">here</a>.</p>

<p>Now it’s time for some real world stuff, we will go through two scenarios where Qiling shines.</p>

<h1 id="fetching-ksløt-dynamic-imports">Fetching KSLØT Dynamic Imports</h1>

<p>Dynamic Imports or Dynamic API resolving is a common technique used by many malware samples to make static analysis harder. Instead of importing all needed APIs, the malware can store the APIs names or hashes then import them dynamically at runtime.</p>

<p>The most common way to do this is by using <code class="language-plaintext highlighter-rouge">LoadLibrary()</code> and <code class="language-plaintext highlighter-rouge">GetProcAddress()</code>, and that’s what we are KSLØT uses.</p>

<p>According to <a href="https://docs.microsoft.com/en-us/windows/win32/api/libloaderapi/nf-libloaderapi-getprocaddress">MSDN</a>, the second argument to<code class="language-plaintext highlighter-rouge">GetProcAddress()</code> is the function name (<code class="language-plaintext highlighter-rouge">"lpProcName"</code>). So we can hook <code class="language-plaintext highlighter-rouge">GetProcAddress()</code> and dump the second argument each time it’s called.</p>

<p>Now you might be thinking, why don’t we just use a debugger and trace the execution flow of the malware ?</p>

<p>I can think of three problems about that approach:</p>

<ul>
  <li>The malware might be implementing Anti-Debugging/Anti-Analysis tricks to waste your time</li>
  <li>The malware might run on a different architecture that you don’t have access to.</li>
  <li>You might want to automate the whole process (Scalability)</li>
</ul>

<p>Let’s start writing the script.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">qiling</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">from</span> <span class="nn">qiling.const</span> <span class="kn">import</span> <span class="o">*</span>

<span class="c1"># initialize emulator (x86_64 windows)
</span><span class="n">ql</span> <span class="o">=</span> <span class="n">Qiling</span><span class="p">([</span><span class="s">"kSLØT_Keylogger.dll"</span><span class="p">],</span> <span class="s">"qiling/examples/rootfs/x8664_windows"</span><span class="p">)</span>
</code></pre></div></div>

<p>The malware sample used here is distributed as a DLL file.</p>

<p>Similar to the main function in typical executables, DLLs have their <code class="language-plaintext highlighter-rouge">DllMain</code> function that is executed automatically when they are loaded into memory.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">BOOL</span> <span class="n">WINAPI</span> <span class="n">DllMain</span><span class="p">(</span>
    <span class="n">HINSTANCE</span> <span class="n">hinstDLL</span><span class="p">,</span>  <span class="c1">// handle to DLL module</span>
    <span class="n">DWORD</span> <span class="n">fdwReason</span><span class="p">,</span>     <span class="c1">// reason for calling function</span>
    <span class="n">LPVOID</span> <span class="n">lpReserved</span>    <span class="c1">// reserved</span>
<span class="p">)</span>
</code></pre></div></div>

<p>As we can see, the function takes 3 arguments. The first one (<code class="language-plaintext highlighter-rouge">hinstDLL</code>) is a handle to the memory area where the DLL has been loaded. The second one stores a value that indicates the reason why the <code class="language-plaintext highlighter-rouge">DllMain</code> has been triggered. Read more <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms682583(v=vs.85).aspx">here</a>.</p>

<p>So to emulate the DLL properly, we need to set these arguments first (for x64 calling convention, paramerts are passed in <code class="language-plaintext highlighter-rouge">RCX</code>, <code class="language-plaintext highlighter-rouge">RDX</code>, <code class="language-plaintext highlighter-rouge">R8</code>, <code class="language-plaintext highlighter-rouge">R9</code>).</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">DLL_MAIN</span> <span class="o">=</span> <span class="mh">0x1800019a0</span>     <span class="c1"># Adress of DLLMain function
# hinstDLL
</span><span class="n">ql</span><span class="p">.</span><span class="n">reg</span><span class="p">.</span><span class="n">rcx</span> <span class="o">=</span> <span class="mh">0x180000000</span>   <span class="c1"># Address where Qiling loads the DLL
# fdwReason
</span><span class="n">ql</span><span class="p">.</span><span class="n">reg</span><span class="p">.</span><span class="n">rdx</span> <span class="o">=</span> <span class="mh">0x1</span>           <span class="c1"># DLL_PROCESS_DETACH
# lpvReserved
</span><span class="n">ql</span><span class="p">.</span><span class="n">reg</span><span class="p">.</span><span class="n">r8</span> <span class="o">=</span> <span class="mh">0x0</span>
</code></pre></div></div>

<p>Next, we can use <code class="language-plaintext highlighter-rouge">set_api()</code> function to hook <code class="language-plaintext highlighter-rouge">GetProcAddress()</code> on exit.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#FARPROC GetProcAddress(
#  HMODULE hModule,
#  LPCSTR  lpProcName
#)
</span><span class="k">def</span> <span class="nf">hook_GetProcAddress</span><span class="p">(</span><span class="n">ql</span><span class="p">,</span> <span class="n">addr</span><span class="p">,</span> <span class="n">params</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"[*] Import: {}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">params</span><span class="p">[</span><span class="s">"lpProcName"</span><span class="p">]))</span>

<span class="c1"># hook GetProcAddress() on exit
</span><span class="n">ql</span><span class="p">.</span><span class="n">set_api</span><span class="p">(</span><span class="s">"GetProcAddress"</span><span class="p">,</span> <span class="n">hook_GetProcAddress</span><span class="p">,</span> <span class="n">QL_INTERCEPT</span><span class="p">.</span><span class="n">EXIT</span><span class="p">)</span>

<span class="c1"># disable logging
</span><span class="n">ql</span><span class="p">.</span><span class="nb">filter</span> <span class="o">=</span> <span class="p">[]</span>
<span class="c1"># start emulation
</span><span class="n">ql</span><span class="p">.</span><span class="n">run</span><span class="p">(</span><span class="n">begin</span><span class="o">=</span><span class="n">DLL_MAIN</span><span class="p">)</span>
</code></pre></div></div>

<p>Let’s see the results:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[+] Initiate stack address at 0x7ffffffde000 
[+] Loading kSLØT_Keylogger.dll to 0x180000000
[+] PE entry point at 0x180006118
[+] TEB addr is 0x6030
[+] PEB addr is 0x60b8
[+] Loading qiling/examples/rootfs/x8664_windows/Windows/System32/ntdll.dll to 0x7ffff0000000
[+] Done with loading qiling/examples/rootfs/x8664_windows/Windows/System32/ntdll.dll
[+] Loading qiling/examples/rootfs/x8664_windows/Windows/System32/kernel32.dll to 0x7ffff01e1000
[+] Done with loading qiling/examples/rootfs/x8664_windows/Windows/System32/kernel32.dll
[*] Import: GetProcAddress
[*] Import: LoadLibraryA
[*] Import: GetProcessImageFileNameW
[*] Import: GetForegroundWindow
[*] Import: GetWindowThreadProcessId
[*] Import: GetWindowTextW
[*] Import: GetKeyboardState
...........
</code></pre></div></div>

<p>Perfect! Knowing the imports of a malware sample can help in profiling it, BTW this malware is a keylogger.</p>

<h1 id="decrypting-qbot-strings">Decrypting QBot Strings</h1>

<p>It’s common to see malware encrypting its strings to make the analysis process more challenging.</p>

<p>Recently I was analyzing QBot which implements this same technique and it only decrypts required strings on demand.</p>

<p>In my analysis, I reverse engineered the decryption routine as it was simple. But imagine if it was a complicated algorithm with lots of mathematical operations and obfuscated instructions, that’s where Qiling comes in handy.</p>

<p><a href="/assets/images/tutorials/qiling/1.png"><img src="/assets/images/tutorials/qiling/1.png" alt="1" /></a></p>

<p>As you can see, the decryption function takes one argument in <code class="language-plaintext highlighter-rouge">EAX</code> which is an index and the returns the required string decrypted.</p>

<p><a href="/assets/images/tutorials/qiling/2.png"><img src="/assets/images/tutorials/qiling/2.png" alt="2" /></a></p>

<p>We can combine the power of Qiling and IDAPython to decrypt the strings and add them as IDA comments.</p>

<p>First we need to get all cross references to the decryption function and then extract the index (second operand) from the previous instruction (as shown above).</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># start/end of the decryption function
</span><span class="n">DEC_START</span> <span class="o">=</span> <span class="mh">0x4065B7</span>
<span class="n">DEC_END</span>   <span class="o">=</span> <span class="mh">0x406655</span>

<span class="c1"># xrefs to the decryption function
</span><span class="n">xrefs</span> <span class="o">=</span> <span class="n">idautils</span><span class="p">.</span><span class="n">CodeRefsTo</span><span class="p">(</span><span class="n">DEC_START</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="c1"># indexes of requested strings to decrypt
</span><span class="n">indexes</span> <span class="o">=</span> <span class="p">{}</span>

<span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">xrefs</span><span class="p">:</span>
    <span class="c1"># address of previous instruction where "eax" is set
</span>    <span class="n">ea</span> <span class="o">=</span> <span class="n">idc</span><span class="p">.</span><span class="n">prev_head</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
    <span class="c1"># type of the second operand of "mov"
</span>    <span class="n">t</span> <span class="o">=</span> <span class="n">idc</span><span class="p">.</span><span class="n">get_operand_type</span><span class="p">(</span><span class="n">ea</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
    <span class="c1"># check if the second operand is an immediate (not dynamic value)
</span>    <span class="k">if</span> <span class="n">t</span> <span class="o">==</span> <span class="n">idc</span><span class="p">.</span><span class="n">o_imm</span><span class="p">:</span>
        <span class="c1"># get the index value (second operand)
</span>        <span class="n">idx</span> <span class="o">=</span> <span class="n">idc</span><span class="p">.</span><span class="n">get_operand_value</span><span class="p">(</span><span class="n">ea</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
        <span class="n">indexes</span><span class="p">[</span><span class="n">ea</span><span class="p">]</span> <span class="o">=</span> <span class="n">idx</span>
</code></pre></div></div>

<p>Next we initialize Qiling emulator object and loop through collected indexes. At each iteration we set <code class="language-plaintext highlighter-rouge">EAX</code> to the index value and run the decryption function.</p>

<p>Finally we read the decrypted string from <code class="language-plaintext highlighter-rouge">EAX</code> (return value) and set it as IDA comment.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># initialize emulator (x86 windows)
</span><span class="n">ql</span> <span class="o">=</span> <span class="n">Qiling</span><span class="p">([</span><span class="s">"qbot.exe"</span><span class="p">],</span> <span class="n">rootfs</span><span class="o">=</span><span class="s">"qiling/examples/rootfs/x86_windows"</span><span class="p">)</span>

<span class="c1"># loop through collected indexes
</span><span class="k">for</span> <span class="n">ea</span><span class="p">,</span> <span class="n">idx</span> <span class="ow">in</span> <span class="n">indexes</span><span class="p">.</span><span class="n">items</span><span class="p">():</span>
    <span class="c1"># set function parameter @eax
</span>    <span class="n">ql</span><span class="p">.</span><span class="n">reg</span><span class="p">.</span><span class="n">eax</span> <span class="o">=</span> <span class="n">idx</span>
    <span class="c1"># run decryption function
</span>    <span class="n">ql</span><span class="p">.</span><span class="n">run</span><span class="p">(</span><span class="n">begin</span><span class="o">=</span><span class="mh">0x4065B7</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="mh">0x406654</span><span class="p">)</span>
    <span class="c1"># set decrypted string as ida comment
</span>    <span class="n">idc</span><span class="p">.</span><span class="n">set_cmt</span><span class="p">(</span><span class="n">ea</span><span class="p">,</span> <span class="n">readString</span><span class="p">(</span><span class="n">ql</span><span class="p">,</span> <span class="n">ql</span><span class="p">.</span><span class="n">reg</span><span class="p">.</span><span class="n">eax</span><span class="p">),</span> <span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>

<p>Reading a string from memory address is simply reading bytes one by one until we reach a null byte.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># read string from memory address
</span><span class="k">def</span> <span class="nf">readString</span><span class="p">(</span><span class="n">ql</span><span class="p">,</span> <span class="n">addr</span><span class="p">):</span>
    <span class="n">res</span> <span class="o">=</span> <span class="s">""</span>
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="c1"># read one byte at a time
</span>        <span class="n">c</span> <span class="o">=</span> <span class="n">ql</span><span class="p">.</span><span class="n">mem</span><span class="p">.</span><span class="n">read</span><span class="p">(</span><span class="n">addr</span><span class="p">,</span> <span class="mi">1</span><span class="p">).</span><span class="n">decode</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">c</span> <span class="o">==</span> <span class="s">'</span><span class="se">\x00</span><span class="s">'</span><span class="p">:</span>
            <span class="k">break</span>
        <span class="n">res</span> <span class="o">+=</span> <span class="n">c</span>
        <span class="n">addr</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="k">return</span> <span class="n">res</span>
</code></pre></div></div>

<p>Let’s see the results:</p>

<p><a href="/assets/images/tutorials/qiling/3.png"><img src="/assets/images/tutorials/qiling/3.png" alt="3" /></a></p>

<p>Viola! we managed to decrypt most of the strings without reversing the decryption function.</p>

<h1 id="conclusion">Conclusion</h1>

<p>Qiling is a great project for malware analysis and binary emulation. Although it’s still new but it has lots of capabilities and a lot more to come.</p>

<p>Code snippets can be found on my <a href="https://github.com/N1ght-W0lf/QilingForMalwareAnalysis/tree/master/Part%202">Github</a>.</p>

<p>Don’t forget to star the <a href="https://github.com/qilingframework/qiling">Project</a> to support the devs :)</p>]]></content><author><name>Zakariae El bouzarazi</name></author><category term="Tutorials" /><summary type="html"><![CDATA[In the first part we talked about the basics of Qiling, you can find it here, Now it's time for some real...]]></summary></entry><entry><title type="html">Qiling For Malware Analysis: Part 1</title><link href="http://localhost:4000/tutorials/qiling-for-malware-analysis-part-1/" rel="alternate" type="text/html" title="Qiling For Malware Analysis: Part 1" /><published>2020-07-25T00:00:00+01:00</published><updated>2020-07-25T00:00:00+01:00</updated><id>http://localhost:4000/tutorials/qiling-for-malware-analysis-part-1</id><content type="html" xml:base="http://localhost:4000/tutorials/qiling-for-malware-analysis-part-1/"><![CDATA[<h1 id="background">Background</h1>

<p>Qiling is an advanced binary emulation framework written in python and based on Unicorn engine.</p>

<p>It supports multiple platform (Windows, MacOS, Linux, BSD, UEFI) and multiple architectures (X86, X86_64, Arm, Arm64, MIPS).</p>

<p>Qiling is designed as a higher level framework, that leverages Unicorn  to emulate CPU instructions, but Qiling understands OS as it has executable format loaders (for PE, MachO &amp; ELF at the moment), dynamic linkers (so we can load &amp; relocate shared libraries), syscall &amp; IO handlers. For this reason, Qiling can run executable binaries that normally runs in native OS.</p>

<h1 id="installation">Installation</h1>

<p>Due to distribution restrictions, Qiling doesn’t bundle Microsoft Windows DLL files and registry.</p>

<p>So for smooth installation, jump to a 64-bit windows machine and execute the following:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">git</span> <span class="n">clone</span> <span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">github</span><span class="p">.</span><span class="n">com</span><span class="o">/</span><span class="n">qilingframework</span><span class="o">/</span><span class="n">qiling</span>
<span class="n">cd</span> <span class="n">qiling</span>
<span class="n">examples</span>\<span class="n">scripts</span>\<span class="n">dllscollector</span><span class="p">.</span><span class="n">bat</span>        <span class="c1"># DLLs collector (requires admin privileges)
</span></code></pre></div></div>

<p>Sometimes the emulated program requires additional DLLs, you can copy them manually to <code class="language-plaintext highlighter-rouge">"qiling/examples/rootfs/x8664_windows/Windows/System32"</code> or <code class="language-plaintext highlighter-rouge">"qiling/examples/rootfs/x86_windows/Windows/SysWOW64/"</code> depending on the program architecture.</p>

<p>Now you can copy <code class="language-plaintext highlighter-rouge">"qiling"</code> folder to any machine you want (Windows, Linux, …) and complete the installation.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pip3</span> <span class="n">install</span> <span class="o">-</span><span class="n">r</span> <span class="n">requirements</span><span class="p">.</span><span class="n">txt</span>    <span class="c1"># sudo for Linux
</span><span class="n">python3</span> <span class="n">setup</span><span class="p">.</span><span class="n">py</span> <span class="n">install</span>            <span class="c1"># sudo for Linux
</span></code></pre></div></div>

<h1 id="emulating-a-file">Emulating a File</h1>

<p>Emulating a binary file is as simple as that:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">qiling</span> <span class="kn">import</span> <span class="o">*</span>

<span class="c1"># initialize emulator (x86-64 linux)
</span><span class="n">ql</span> <span class="o">=</span> <span class="n">Qiling</span><span class="p">(</span><span class="n">filename</span><span class="o">=</span><span class="p">[</span><span class="s">"qiling/examples/rootfs/x8664_linux/bin/x8664_hello"</span><span class="p">],</span> 
            <span class="n">rootfs</span><span class="o">=</span><span class="s">"qiling/examples/rootfs/x8664_linux"</span><span class="p">)</span>
<span class="c1"># start emulation
</span><span class="n">ql</span><span class="p">.</span><span class="n">run</span><span class="p">()</span>
</code></pre></div></div>

<p>Qiling initialization <code class="language-plaintext highlighter-rouge">constructor</code> can take multiple arguments:</p>

<ul>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">filename</code></strong>: binary file and its arguments, example: filename=[“test”,”-argv1”,”argv2”]</p>
  </li>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">rootfs</code></strong>: virtual “/” folder, this is a “jail” file system when executing Qiling (target architecture)</p>
  </li>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">env</code></strong>: environment variables, example: env={“SHELL”:”/bin/bash”,”HOME”:”/tmp”}</p>
  </li>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">output</code></strong>: “default”, “debug”, “disasm”, “dump” where dump=(disam + debug)</p>
  </li>
</ul>

<p>The <code class="language-plaintext highlighter-rouge">run()</code> function can also take multiple arguments:</p>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">begin</code></strong>: start address of emulated code</li>
  <li><strong><code class="language-plaintext highlighter-rouge">end</code></strong>: end address of emulated code</li>
  <li><strong><code class="language-plaintext highlighter-rouge">timeout</code></strong>: emulation timeout (in microseconds)</li>
  <li><strong><code class="language-plaintext highlighter-rouge">count</code></strong>: maximum instruction count to be emulated</li>
</ul>

<p>Now let’s run our first script:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>........
brk(0x0)
brk(0x555555779000)
write(1,555555758260,14) = 0
Hello, World!
</code></pre></div></div>

<p>As you can see, Qiling outputs <code class="language-plaintext highlighter-rouge">strace</code> logs by default. You can disable them using filters.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># disable strace logs
</span><span class="n">ql</span><span class="p">.</span><span class="nb">filter</span> <span class="o">=</span> <span class="p">[]</span>
<span class="c1"># display only "open" logs
</span><span class="n">ql</span><span class="p">.</span><span class="nb">filter</span> <span class="o">=</span> <span class="p">[</span><span class="s">"open"</span><span class="p">]</span>
</code></pre></div></div>

<h1 id="emulating-a-shellcode">Emulating a Shellcode</h1>

<p>To keep things simple, we will use this tiny shellcode:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">shellcode</span> <span class="o">=</span> <span class="sa">b</span><span class="s">"</span><span class="se">\x41\x4a</span><span class="s">"</span> <span class="c1"># inc ecx; dec edx
</span></code></pre></div></div>

<p>Next, let’s initialize Qiling.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># initialize emulator (x86 linux)
</span><span class="n">ql</span> <span class="o">=</span> <span class="n">Qiling</span><span class="p">(</span><span class="n">shellcoder</span><span class="o">=</span><span class="n">shellcode</span><span class="p">,</span> 
            <span class="n">rootfs</span><span class="o">=</span><span class="s">"qiling/examples/rootfs/x86_linux/"</span><span class="p">,</span>
            <span class="n">ostype</span><span class="o">=</span><span class="s">"linux"</span><span class="p">,</span>
            <span class="n">archtype</span><span class="o">=</span><span class="s">"x86"</span><span class="p">,</span>
            <span class="n">output</span><span class="o">=</span><span class="s">"disasm"</span><span class="p">)</span>
</code></pre></div></div>

<p>Emulating shellcode is a little different than binary files, the initialization <code class="language-plaintext highlighter-rouge">constructor</code> takes additional arguments:</p>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">shellcoder</code></strong>: shellcode in binary format</li>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">rootfs</code></strong>: explained above</p>
  </li>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">env</code></strong>: explained above</p>
  </li>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">ostype</code></strong>: “linux”, “macos”, “windows”, “uefi”, “freebsd”</p>
  </li>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">archtype</code></strong>: “x8664”, “x86”, “arm”, “arm64”, “mips”</p>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">output</code></strong>: explained above</li>
</ul>

<p>Here we set the output to <code class="language-plaintext highlighter-rouge">"disasm"</code> to see the executed instructions.</p>

<p>The shellcode modifies the values of <code class="language-plaintext highlighter-rouge">ECX</code> and <code class="language-plaintext highlighter-rouge">EDX</code> registers, so let’s write some values to them before emulating.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># set machine registers
</span><span class="n">ql</span><span class="p">.</span><span class="n">reg</span><span class="p">.</span><span class="n">ecx</span> <span class="o">=</span> <span class="mh">0x3</span>
<span class="n">ql</span><span class="p">.</span><span class="n">reg</span><span class="p">.</span><span class="n">edx</span> <span class="o">=</span> <span class="mh">0x7</span>
<span class="c1"># start emulation
</span><span class="n">ql</span><span class="p">.</span><span class="n">run</span><span class="p">()</span>
<span class="c1"># read machine registers
</span><span class="k">print</span><span class="p">(</span><span class="s">"ecx = 0x{:x}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">ql</span><span class="p">.</span><span class="n">reg</span><span class="p">.</span><span class="n">ecx</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="s">"edx = 0x{:x}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">ql</span><span class="p">.</span><span class="n">reg</span><span class="p">.</span><span class="n">edx</span><span class="p">))</span>
</code></pre></div></div>

<p>Let’s see the results:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[+] 0x11ff000      41          inc ecx
[+] 0x11ff001      4a          dec edx
ecx = 0x4
edx = 0x6
</code></pre></div></div>

<h1 id="hooking">Hooking</h1>

<p>Qiling supports a wide range of hooks such as hooking specific instructions and hooking memory read/write actions.</p>

<p>Let’s implement a basic disassembler with the help of Capstone and Qiling hooks.</p>

<p><strong>Capstone</strong> is a multi-architecture disassembly framework, we can setup a code hook using Qiling to hook every instruction then use Capstone to disassemble the instructions.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">capstone</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">from</span> <span class="nn">qiling</span> <span class="kn">import</span> <span class="o">*</span>

<span class="c1"># initialize emulator (x86 ARM)
</span><span class="n">ql</span> <span class="o">=</span> <span class="n">Qiling</span><span class="p">([</span><span class="s">"qiling/examples/rootfs/arm_linux/bin/arm_hello"</span><span class="p">],</span>
             <span class="s">"qiling/examples/rootfs/arm_linux"</span><span class="p">)</span>
<span class="c1"># hook every instruction
</span><span class="n">ql</span><span class="p">.</span><span class="n">hook_code</span><span class="p">(</span><span class="n">hook_callback</span><span class="p">)</span>
<span class="c1"># start emulation (timeout in microseconds)
</span><span class="n">ql</span><span class="p">.</span><span class="n">run</span><span class="p">(</span><span class="n">timeout</span><span class="o">=</span><span class="mi">1000</span><span class="p">)</span>
</code></pre></div></div>

<p>We can add a code hook by simply calling <code class="language-plaintext highlighter-rouge">hook_code()</code> with a callback function.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">hook_callback</span><span class="p">(</span><span class="n">ql</span><span class="p">,</span> <span class="n">address</span><span class="p">,</span> <span class="n">size</span><span class="p">):</span>
    <span class="c1"># read current instruction bytes
</span>    <span class="n">data</span> <span class="o">=</span> <span class="n">ql</span><span class="p">.</span><span class="n">mem</span><span class="p">.</span><span class="n">read</span><span class="p">(</span><span class="n">address</span><span class="p">,</span> <span class="n">size</span><span class="p">)</span>
    <span class="c1"># initialize Capstone
</span>    <span class="n">md</span> <span class="o">=</span> <span class="n">Cs</span><span class="p">(</span><span class="n">CS_ARCH_ARM</span><span class="p">,</span> <span class="n">CS_MODE_ARM</span><span class="p">)</span>
    <span class="c1"># disassemble current instruction
</span>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">md</span><span class="p">.</span><span class="n">disasm</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">address</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"[*] 0x{:08x}: {} {}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">i</span><span class="p">.</span><span class="n">address</span><span class="p">,</span> <span class="n">i</span><span class="p">.</span><span class="n">mnemonic</span><span class="p">,</span> <span class="n">i</span><span class="p">.</span><span class="n">op_str</span><span class="p">))</span>
</code></pre></div></div>

<p>The callback function takes three arguments:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">ql</code>: our emulator object</li>
  <li><code class="language-plaintext highlighter-rouge">address</code>: the address of the current instruction</li>
  <li><code class="language-plaintext highlighter-rouge">size</code>: the size of the instruction in bytes</li>
</ul>

<p>We can disassemble the current instruction using <code class="language-plaintext highlighter-rouge">disasm()</code> which takes two arguments (data to disassemble and a base address), here we are printing the instruction address, instruction mnemonic and instruction operands.</p>

<p>Let’s see the results:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[*] 0x047ba9e0: ldr sl, [pc, #0x94]
[*] 0x047ba9e4: ldr r4, [pc, #0x94]
[*] 0x047ba9e8: mov r0, sp
[*] 0x047ba9ec: bl #0x47bb154
[*] 0x0001030c: mov fp, #0
[*] 0x00010310: mov lr, #0
[*] 0x00010314: pop {r1}
..........
</code></pre></div></div>

<h1 id="conclusion">Conclusion</h1>

<p>In this part we learned the basics of Qiling and how to emulate code for different architectures.</p>

<p>I really encourage you to read through Qiling <a href="https://docs.qiling.io/en/latest/">Documentation</a> to learn more about it’s amazing capabilities.</p>

<p>Code snippets can be found on my <a href="https://github.com/N1ght-W0lf/QilingForMalwareAnalysis/tree/master/Part%201">Github</a>.</p>]]></content><author><name>Zakariae El bouzarazi</name></author><category term="Tutorials" /><summary type="html"><![CDATA[Qiling is an advanced binary emulation framework written in python and based on Unicorn...]]></summary></entry><entry><title type="html">Deep Analysis of QBot Banking Trojan</title><link href="http://localhost:4000/malware%20analysis/qbot-banking-trojan/" rel="alternate" type="text/html" title="Deep Analysis of QBot Banking Trojan" /><published>2020-07-15T00:00:00+01:00</published><updated>2020-07-15T00:00:00+01:00</updated><id>http://localhost:4000/malware%20analysis/qbot-banking-trojan</id><content type="html" xml:base="http://localhost:4000/malware%20analysis/qbot-banking-trojan/"><![CDATA[<p>QBot is a modular information stealer also known as Qakbot or Pinkslipbot. It has been active for years since 2007. It has historically been known as a banking Trojan, meaning that it steals financial data from infected systems.</p>

<h1 id="infection-flow">Infection Flow</h1>

<p>QBot can be delivered in various different ways including Malspam (Malicious Spam) or dropped by other malware families like Emotet.</p>

<p>The infection flow for this campaign is as follows:</p>

<p><a href="/assets/images/malware-analysis/qbot-banking-trojan/1.png"><img src="/assets/images/malware-analysis/qbot-banking-trojan/1.png" alt="1" /></a></p>

<p>First, the victim receives a phishing email with a link to a malicious zip file.</p>

<p><a href="/assets/images/malware-analysis/qbot-banking-trojan/2.png"><img src="/assets/images/malware-analysis/qbot-banking-trojan/2.png" alt="2" /></a></p>

<p>The zip file contains a very obfuscated VBS file which downloads and launches Qbot executable.</p>

<p><a href="/assets/images/malware-analysis/qbot-banking-trojan/3.png"><img src="/assets/images/malware-analysis/qbot-banking-trojan/3.png" alt="3" /></a></p>

<p>The VBS file tries to download Qbot from different places:</p>

<ul>
  <li>http://st29[.]ru/tbzirttmcnmb/88888888.png</li>
  <li>http://restaurantbrighton[.]ru/uyqcb/88888888.png</li>
  <li>http://royalapartments[.]pl/vtjwwoqxaix/88888888.png</li>
  <li>http://alergeny.dietapacjenta[.]pl/pgaakzs/88888888.png</li>
  <li>http://egyorg[.]com/vxvipjfembb/88888888.png</li>
</ul>

<p>Notice the misleading URL, it looks like it’s downloading a PNG image but the raw data says something else.</p>

<h1 id="unpacking">Unpacking</h1>

<p>QBot is packed with a custom packer, but the unpacking process is really simple. It allocates memory for the unpacked code using <code class="language-plaintext highlighter-rouge">VirtualAlloc()</code> and changes memory protection using <code class="language-plaintext highlighter-rouge">VirtualProtect()</code>. So we just need 2 breakpoints at  <code class="language-plaintext highlighter-rouge">VirtualAlloc()</code>  and  <code class="language-plaintext highlighter-rouge">VirtualProtect()</code>.</p>

<p><a href="/assets/images/malware-analysis/qbot-banking-trojan/4.png"><img src="/assets/images/malware-analysis/qbot-banking-trojan/4.png" alt="4" /></a></p>

<h1 id="encrypted-strings">Encrypted Strings</h1>

<p>Most of QBot strings are encrypted (stored in a continuous blob) and they are decrypted on demand. The decryption routine accepts one argument which is the  index to the string then it XORs it with a hardcoded bytes array until it encounters a null byte.</p>

<p>We can use IDAPython to decrypt the strings and add them as comments.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">idc</span>
<span class="kn">import</span> <span class="nn">idautils</span>

<span class="n">dec_routine</span> <span class="o">=</span> <span class="mh">0x4065B7</span>
<span class="n">enc_strings</span> <span class="o">=</span> <span class="mh">0x40B930</span>
<span class="n">bytes_arr</span> <span class="o">=</span> <span class="mh">0x410120</span>

<span class="k">def</span> <span class="nf">decrypt_string</span><span class="p">(</span><span class="n">idx</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">idx</span> <span class="o">&gt;=</span> <span class="mh">0x36F4</span><span class="p">:</span>
        <span class="k">return</span>    <span class="c1"># out of bounds
</span>    <span class="n">res</span> <span class="o">=</span> <span class="s">""</span>
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="n">c</span> <span class="o">=</span> <span class="n">idc</span><span class="p">.</span><span class="n">get_wide_byte</span><span class="p">(</span><span class="n">enc_strings</span><span class="o">+</span><span class="n">idx</span><span class="p">)</span> <span class="o">^</span> <span class="n">idc</span><span class="p">.</span><span class="n">get_wide_byte</span><span class="p">(</span><span class="n">bytes_arr</span> <span class="o">+</span> <span class="p">(</span><span class="n">idx</span><span class="o">&amp;</span><span class="mh">0x3F</span><span class="p">))</span>
        <span class="k">if</span> <span class="n">c</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span> <span class="k">break</span>
        <span class="n">res</span> <span class="o">+=</span> <span class="nb">chr</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
        <span class="n">idx</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="k">return</span> <span class="n">res</span>

<span class="n">xrefs</span> <span class="o">=</span> <span class="n">idautils</span><span class="p">.</span><span class="n">CodeRefsTo</span><span class="p">(</span><span class="n">dec_routine</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">xrefs</span><span class="p">:</span>
    <span class="n">ea</span> <span class="o">=</span> <span class="n">idc</span><span class="p">.</span><span class="n">prev_head</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
    <span class="n">t</span> <span class="o">=</span> <span class="n">idc</span><span class="p">.</span><span class="n">get_operand_type</span><span class="p">(</span><span class="n">ea</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">t</span> <span class="o">==</span> <span class="n">idc</span><span class="p">.</span><span class="n">o_imm</span><span class="p">:</span>
        <span class="n">idx</span> <span class="o">=</span> <span class="n">idc</span><span class="p">.</span><span class="n">get_operand_value</span><span class="p">(</span><span class="n">ea</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
        <span class="n">dec</span> <span class="o">=</span> <span class="n">decrypt_string</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span>
        <span class="n">idc</span><span class="p">.</span><span class="n">set_cmt</span><span class="p">(</span><span class="n">ea</span><span class="p">,</span> <span class="n">dec</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>

<p>And here is the result, that’s much easier to work with.</p>

<p><a href="/assets/images/malware-analysis/qbot-banking-trojan/5.png"><img src="/assets/images/malware-analysis/qbot-banking-trojan/5.png" alt="5" /></a></p>

<p>This should take care of most of the strings, the rest of strings indexes are calculated dynamically at runtime.</p>

<p>We decrypt all strings by looping through the encrypted blob and decrypt strings one by one.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">idx</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">while</span> <span class="n">idx</span> <span class="o">&lt;</span> <span class="mh">0x36F4</span><span class="p">:</span>
    <span class="n">dec</span> <span class="o">=</span> <span class="n">decrypt_string</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span>
    <span class="n">idx</span> <span class="o">+=</span> <span class="nb">len</span><span class="p">(</span><span class="n">dec</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span>
    <span class="k">print</span><span class="p">(</span><span class="n">dec</span><span class="p">)</span>
</code></pre></div></div>

<h1 id="anti-analysis">Anti-Analysis</h1>

<p>QBot spawns a new process of itself with the  <code class="language-plaintext highlighter-rouge">"/C"</code> parameter, this process is responsible for doing Anti-Analysis checks.</p>

<p><a href="/assets/images/malware-analysis/qbot-banking-trojan/6.png"><img src="/assets/images/malware-analysis/qbot-banking-trojan/6.png" alt="6" /></a></p>

<p>The parent process checks the exit code of this spawned process. If the exit code is not 0, it means that QBot is being analyzed (and so it exits).</p>

<p><a href="/assets/images/malware-analysis/qbot-banking-trojan/7.png"><img src="/assets/images/malware-analysis/qbot-banking-trojan/7.png" alt="7" /></a></p>

<p>So let’s go over the anti-analysis techniques.</p>

<h2 id="checking-vm">Checking VM</h2>

<p>In VMWare, communication with the host is done through a specific I/O  port <code class="language-plaintext highlighter-rouge">(0x5658)</code>, so QBot uses the <code class="language-plaintext highlighter-rouge">in</code> assembly instruction to detect VMWare by reading from this port and checking the return value in <code class="language-plaintext highlighter-rouge">ebx</code> if it’s equal to <code class="language-plaintext highlighter-rouge">VMXh</code> (VMware magic value).</p>

<p>If we are outside VMWare, a privilege error occurs and this code will return 0.</p>

<p><a href="/assets/images/malware-analysis/qbot-banking-trojan/8.png"><img src="/assets/images/malware-analysis/qbot-banking-trojan/8.png" alt="8" /></a></p>

<p>Another Anti-VM trick is to check hardware devices against known devices names used by VMs and Sandboxes.</p>

<p>Here is the list of devices names.</p>

<details style="color: #EEFFFF; font-family: monospace !default; font-size: 0.85em; background: #263238; border: 1px solid #263238; border-radius: 3px; padding: 10px; line-height: 2.2; overflow-x: scroll;">
    <summary style="outline: none; cursor: pointer">
        <span style="color: darkgray">
            Expand to see more
        </span><br />
<div style="height: 1px"></div>
&emsp; VMware Pointing<br />
&emsp; VMware Accelerated<br />
&emsp; VMware SCSI<br />
&emsp; VMware SVGA<br />
&emsp; VMware Replay<br />
&emsp; VMware server memory<br />
</summary>
&emsp; CWSandbox<br />
&emsp; Virtual HD<br />
&emsp; QEMU<br />
&emsp; Red Hat VirtIO<br />
&emsp; srootkit<br />
&emsp; VMware VMaudio<br />
&emsp; VMware Vista<br />
&emsp; VBoxVideo<br />
&emsp; VBoxGuest<br />
&emsp; vmxnet<br />
&emsp; vmscsi<br />
&emsp; VMAUDIO<br />
&emsp; vmdebug<br />
&emsp; vm3dmp<br />
&emsp; vmrawdsk<br />
&emsp; vmx_svga<br />
&emsp; ansfltr<br />
&emsp; sbtisht<br />
</details>

<h2 id="checking-processes">Checking Processes</h2>

<p>QBot loops through running processes and compares their executable names against known analysis tools.</p>

<details style="color: #EEFFFF; font-family: monospace !default; font-size: 0.85em; background: #263238; border: 1px solid #263238; border-radius: 3px; padding: 10px; line-height: 2.2; overflow-x: scroll;">
    <summary style="outline: none; cursor: pointer">
        <span style="color: darkgray">
            Expand to see more
        </span><br />
<div style="height: 1px"></div>
&emsp; Fiddler.exe<br />
&emsp; samp1e.exe<br />
&emsp; sample.exe<br />
&emsp; runsample.exe<br />
&emsp; lordpe.exe<br />
&emsp; regshot.exe<br />
</summary>
&emsp; Autoruns.exe<br />
&emsp; dsniff.exe<br />
&emsp; VBoxTray.exe<br />
&emsp; HashMyFiles.exe<br />
&emsp; ProcessHacker.exe<br />
&emsp; Procmon.exe<br />
&emsp; Procmon64.exe<br />
&emsp; netmon.exe<br />
&emsp; vmtoolsd.exe<br />
&emsp; vm3dservice.exe<br />
&emsp; VGAuthService.exe<br />
&emsp; pr0c3xp.exe<br />
&emsp; CFF Explorer.exe<br />
&emsp; dumpcap.exe<br />
&emsp; Wireshark.exe<br />
&emsp; idaq.exe<br />
&emsp; idaq64.exe<br />
&emsp; TPAutoConnect.exe<br />
&emsp; ResourceHacker.exe<br />
&emsp; vmacthlp.exe<br />
&emsp; OLLYDBG.EXE<br />
&emsp; windbg.exe<br />
&emsp; bds-vision-agent-nai.exe<br />
&emsp; bds-vision-apis.exe<br />
&emsp; bds-vision-agent-app.exe<br />
&emsp; MultiAnalysis_v1.0.294.exe<br />
&emsp; x32dbg.exe<br />
&emsp; VBoxService.exe<br />
&emsp; Tcpview.exe<br />
</details>

<h2 id="checking-dlls">Checking DLLs</h2>

<p>Sandbox detection can be done by enumerating loaded DLLs and comparing them against known DLLs used by sandboxes. Here it’s just using 2 of them.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ivm-inject.dll     # Buster Sandbox Analyzer
SbieDll.dll        # SandBoxie
</code></pre></div></div>

<h2 id="checking-filename">Checking Filename</h2>

<p>Some sandboxes may change the sample file name. So QBot checks if its process name contains one of these strings.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sample
mlwr_smpl
artifact.exe
</code></pre></div></div>

<h2 id="checking-cpu">Checking CPU</h2>

<p>The last check is done using <code class="language-plaintext highlighter-rouge">CPUID</code> instruction. First it is executed with <code class="language-plaintext highlighter-rouge">EAX=0</code> to get the CPU vendor and compares it with <code class="language-plaintext highlighter-rouge">GenuineIntel</code> (Intel processor).</p>

<p>Then it is executed with <code class="language-plaintext highlighter-rouge">EAX=1</code> to get the processors features.</p>

<p>On a physical machine the last bit will be equal to 0. On a guest VM it will equal to 1.</p>

<p><a href="/assets/images/malware-analysis/qbot-banking-trojan/9.png"><img src="/assets/images/malware-analysis/qbot-banking-trojan/9.png" alt="9" /></a></p>

<h1 id="back-to-parent">Back To Parent</h1>

<p>After the Anti-Analysis checks, QBot drops a copy of itself along with a configuration file at <code class="language-plaintext highlighter-rouge">"%APPDATA%\Microsoft\&lt;random_folder_name&gt;"</code>.</p>

<p><a href="/assets/images/malware-analysis/qbot-banking-trojan/10.png"><img src="/assets/images/malware-analysis/qbot-banking-trojan/10.png" alt="10" /></a></p>

<p>Finally, QBot starts the dropped copy in a new process and overwrites itself with a legitimate executable, here it’s  <code class="language-plaintext highlighter-rouge">"calc.exe"</code>.</p>

<p><a href="/assets/images/malware-analysis/qbot-banking-trojan/11.png"><img src="/assets/images/malware-analysis/qbot-banking-trojan/11.png" alt="11" /></a></p>

<h1 id="configuration-file">Configuration File</h1>

<p>The dropped configuration file is accessed frequently by Qbot, this file is RC4 encrypted. By setting a breakpoint before the contents of the file gets encrypted I got the following data:</p>

<table>
  <thead>
    <tr>
      <th>Field</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>10=spx143</td>
      <td>Campaign ID</td>
    </tr>
    <tr>
      <td>11=2</td>
      <td>Number of hardcoded C2</td>
    </tr>
    <tr>
      <td>1=13.59.00-24/06/2020</td>
      <td>Date of Qbot install in HH:MM:ss-dd/mm/yyyy</td>
    </tr>
    <tr>
      <td>2=1592996340</td>
      <td>Victim Qbot install</td>
    </tr>
    <tr>
      <td>50=1</td>
      <td>N/A</td>
    </tr>
    <tr>
      <td>5=VgBCAE8AWABTAFYAUgA7ADIA</td>
      <td>Victim network shares</td>
    </tr>
    <tr>
      <td>38=1593047244</td>
      <td>Last victim call to C2 (Unix time)</td>
    </tr>
    <tr>
      <td>45=187.163.101.137</td>
      <td>C2 IP</td>
    </tr>
    <tr>
      <td>46=995</td>
      <td>C2 port</td>
    </tr>
    <tr>
      <td>39=45.242.76.104</td>
      <td>Victim external IP</td>
    </tr>
    <tr>
      <td>43=1593006172</td>
      <td>Time of record (Unix time)</td>
    </tr>
    <tr>
      <td>49=1</td>
      <td>N/A</td>
    </tr>
  </tbody>
</table>

<h1 id="persistence">Persistence</h1>

<p>QBot achieves persistence by creating a new registry value under the key <code class="language-plaintext highlighter-rouge">"HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Run"</code>. It also registers a scheduled task that runs every 5 hours.</p>

<p><a href="/assets/images/malware-analysis/qbot-banking-trojan/12.png"><img src="/assets/images/malware-analysis/qbot-banking-trojan/12.png" alt="12" /></a></p>

<h1 id="process-injection">Process Injection</h1>

<p>QBot tries to inject its unpacked code in one of these processes <code class="language-plaintext highlighter-rouge">("explorer.exe", "mobsync.exe", "iexplorer.exe")</code> and it uses <code class="language-plaintext highlighter-rouge">Process Hollowing</code> technique to achieve that.</p>

<p>It first starts a new suspended process with <code class="language-plaintext highlighter-rouge">CreateProcessW()</code> then it writes the injected code into the target process using <code class="language-plaintext highlighter-rouge">ZwCreateSection()</code>, <code class="language-plaintext highlighter-rouge">ZwMapViewOfSection()</code> and <code class="language-plaintext highlighter-rouge">ZwWriteVirtualMemory()</code>.</p>

<p>Finally it sets the thread context to jump to the injected code and resume execution with <code class="language-plaintext highlighter-rouge">ResumeThread()</code>.</p>

<h1 id="core-module">Core Module</h1>

<p>The injected code loads and decrypts one of its resources  <code class="language-plaintext highlighter-rouge">"307"</code> . After dumping it, I found out that it’s a DLL (this is the core module).</p>

<p><a href="/assets/images/malware-analysis/qbot-banking-trojan/13.png"><img src="/assets/images/malware-analysis/qbot-banking-trojan/13.png" alt="13" /></a></p>

<p>From now on, we will be analyzing the core DLL of QBot.</p>

<p>The core module has 2 resources both RC4 encrypted.</p>

<p><a href="/assets/images/malware-analysis/qbot-banking-trojan/14.png"><img src="/assets/images/malware-analysis/qbot-banking-trojan/14.png" alt="14" /></a></p>

<p>The first resource gets loaded into memory then RC4 decrypted.</p>

<p><a href="/assets/images/malware-analysis/qbot-banking-trojan/15.png"><img src="/assets/images/malware-analysis/qbot-banking-trojan/15.png" alt="15" /></a></p>

<p>The contents of the decrypted resource are:</p>

<ul>
  <li>
    <p>10=spx143 (Campaign ID)</p>
  </li>
  <li>
    <p>3=1592482956 (Timestamp)</p>
  </li>
</ul>

<p>After some digging, I found out how the resources are decrypted. The first <strong>20</strong> bytes of each resource are the RC4 key of this resource, and the rest are the actual encrypted data.</p>

<p>So by using this find, we can decrypt the other resource <code class="language-plaintext highlighter-rouge">"311"</code>.</p>

<p><a href="/assets/images/malware-analysis/qbot-banking-trojan/16.png"><img src="/assets/images/malware-analysis/qbot-banking-trojan/16.png" alt="16" /></a></p>

<p>Great!!! Now we have the list of C2 servers (150 servers!).</p>

<p>The reason there is many controllers is that these are actually just proxies of infected bots acting as intermediate nodes between the victim and the real C2 and thus hiding the backend infrastructure of the attacker.</p>

<p>So it works like this:</p>

<p><a href="/assets/images/malware-analysis/qbot-banking-trojan/17.png"><img src="/assets/images/malware-analysis/qbot-banking-trojan/17.png" alt="17" /></a></p>

<h1 id="c2-communication">C2 Communication</h1>

<p>QBot obfuscates its communication with the C2 server by encrypting the payloads using RC4 and encoding the result using Base64.</p>

<p>The communication is also done over SSL, you can notice that the traffic has unusual certificate issuer data.</p>

<p><a href="/assets/images/malware-analysis/qbot-banking-trojan/18.png"><img src="/assets/images/malware-analysis/qbot-banking-trojan/18.png" alt="18" /></a></p>

<p>We can use <code class="language-plaintext highlighter-rouge">Fiddler</code> to intercept and decrypt the HTTPS traffic.</p>

<p><a href="/assets/images/malware-analysis/qbot-banking-trojan/19.png"><img src="/assets/images/malware-analysis/qbot-banking-trojan/19.png" alt="19" /></a></p>

<p>The RC4 key for encrypting the payload is the SHA1 hash of the first 16 bytes of the Base64-decoded payload + a hardcoded salt (The salt is stored as an encrypted string).</p>

<p>Here is an implementation of the decryption algorithm:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">HARDCODED_SALT</span> <span class="o">=</span> <span class="sa">b</span><span class="s">"jHxastDcds)oMc=jvh7wdUhxcsdt2"</span>    <span class="c1"># decrypted string
</span>
<span class="k">def</span> <span class="nf">decrypt_payload</span><span class="p">(</span><span class="n">encrypted_blob</span><span class="p">):</span>
    <span class="n">b64_decoded</span> <span class="o">=</span> <span class="n">base64</span><span class="p">.</span><span class="n">b64decode</span><span class="p">(</span><span class="n">encrypted_blob</span><span class="p">)</span>
    <span class="n">decryption_key</span> <span class="o">=</span> <span class="n">b64_decoded</span><span class="p">[:</span><span class="mh">0x10</span><span class="p">]</span> <span class="o">+</span> <span class="n">HARDCODED_SALT</span>
    <span class="n">sha1hash</span> <span class="o">=</span> <span class="n">hashlib</span><span class="p">.</span><span class="n">sha1</span><span class="p">()</span>
    <span class="n">sha1hash</span><span class="p">.</span><span class="n">update</span><span class="p">(</span><span class="n">decryption_key</span><span class="p">)</span>
    <span class="n">decryption_key_hash</span> <span class="o">=</span> <span class="n">sha1hash</span><span class="p">.</span><span class="n">digest</span><span class="p">()</span>
    <span class="n">rc4</span> <span class="o">=</span> <span class="n">ARC4</span><span class="p">(</span><span class="n">decryption_key_hash</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">rc4</span><span class="p">.</span><span class="n">decrypt</span><span class="p">(</span><span class="n">b64_decoded</span><span class="p">[</span><span class="mh">0x10</span><span class="p">:])</span>
</code></pre></div></div>

<p>The decrypted payload is in JSON form.</p>

<ul>
  <li>Decrypted C2 Request: {“8”:9,”1”:17,”2”:”pnmfcq111232”}</li>
  <li>Decrypted C2 Response: {“8”:5,”16”:770897804,”39”:”V4UnoDQSEblewhh63UfUqAns”,”38”:1}</li>
</ul>

<h1 id="commands-list">Commands List</h1>

<p>After establishing communication, the C2 server will send commands indexes to be executed.</p>

<p>Here is the list of commands and their corresponding indexes (I have renamed the important commands).</p>

<p><a href="/assets/images/malware-analysis/qbot-banking-trojan/20.png"><img src="/assets/images/malware-analysis/qbot-banking-trojan/20.png" alt="20" /></a></p>

<p>It’s worth mentioning that dynamic imports of the core DLL are stored in the same format as commands <code class="language-plaintext highlighter-rouge">"&lt;address, API_index, DLL_index&gt;"</code>, the API and DLL indexes are passed to the string decryption routine which returns their corresponding names then it uses <code class="language-plaintext highlighter-rouge">LoadLibrary</code> and <code class="language-plaintext highlighter-rouge">GetProcAddress</code> to resolve the imports.</p>

<p><a href="/assets/images/malware-analysis/qbot-banking-trojan/21.png"><img src="/assets/images/malware-analysis/qbot-banking-trojan/21.png" alt="21" /></a></p>

<p>Let’s go through some of the interesting commands.</p>

<h2 id="command-13-lateral-movement">Command 13: Lateral Movement</h2>

<p>QBot can spread through the network by enumerating network shares using <code class="language-plaintext highlighter-rouge">WNetOpenEnumW()</code> and <code class="language-plaintext highlighter-rouge">WNetEnumResourceW</code>() then it drops a copy of Qbot into the shared folders.</p>

<p>Then the dropped executable is registered as an auto-start service on the target machine. The names for the service and the dropped file are randomly generated strings.</p>

<p><a href="/assets/images/malware-analysis/qbot-banking-trojan/22.png"><img src="/assets/images/malware-analysis/qbot-banking-trojan/22.png" alt="22" /></a></p>

<p>Finally, Qbot deletes the created service and dropped file from the target machine (as it’s successfully infected).</p>

<h2 id="command-21-collecting-installed-applications">Command 21: Collecting Installed Applications</h2>

<p>QBot can collect installed applications by enumeration subkeys of the registry key <code class="language-plaintext highlighter-rouge">"HKLM\Software\Microsoft\Windows\CurrentVersion\Uninstall"</code>.</p>

<p><a href="/assets/images/malware-analysis/qbot-banking-trojan/23.png"><img src="/assets/images/malware-analysis/qbot-banking-trojan/23.png" alt="23" /></a></p>

<p>The collected data is appended to the end of a string containing additional information about the victim’s machine and time of collection.</p>

<p><code class="language-plaintext highlighter-rouge">t=i1 time=[&lt;time_of_collect&gt;] ext_ip=[&lt;external_IP&gt;] dnsname=[?] hostname=[&lt;computer_name&gt;] user=[] domain=[] is_admin=[&lt;YES/NO&gt;] os=[&lt;windows_ver&gt;] qbot_version=[&lt;qbot_ver&gt;] install_time=[&lt;qbot_install_time&gt;] exe=[&lt;injected_process&gt;] prod_id=[NULL] iface_n=[&lt;interface_IP&gt;/&lt;interface_IP&gt;] UP] soft=[&lt;app1;ver&gt;|&lt;app2;ver&gt;|...]</code></p>

<p>Example of collected data:</p>

<p><a href="/assets/images/malware-analysis/qbot-banking-trojan/24.png"><img src="/assets/images/malware-analysis/qbot-banking-trojan/24.png" alt="24" /></a></p>

<p>Then the data is RC4 encrypted and written to <code class="language-plaintext highlighter-rouge">"wdqlxw32.dll"</code> at the same directory of QBot.</p>

<p>Finally, <code class="language-plaintext highlighter-rouge">"wdqlxw32.dll"</code> is Zlib compressed and RC4 encrypted again then it’s saved to <code class="language-plaintext highlighter-rouge">"cwdqlxw32.dll"</code> and the original <code class="language-plaintext highlighter-rouge">"wdqlxw32.dll"</code> is deleted.</p>

<p><a href="/assets/images/malware-analysis/qbot-banking-trojan/25.png"><img src="/assets/images/malware-analysis/qbot-banking-trojan/25.png" alt="25" /></a></p>

<p>The compressed file is then transfered to the C2 server (RC4 encrypted and Base64 encoded) in the key <code class="language-plaintext highlighter-rouge">"36"</code> and the compressed file <code class="language-plaintext highlighter-rouge">"cwdqlxw32.dll"</code> is also deleted.</p>

<p><a href="/assets/images/malware-analysis/qbot-banking-trojan/26.png"><img src="/assets/images/malware-analysis/qbot-banking-trojan/26.png" alt="26" /></a></p>

<h2 id="command-31-fetching-plugins">Command 31: Fetching Plugins</h2>

<p>As we said before, QBot is known to be a modular malware. It can load additional plugins received from the C2 server (plugins are RC4 encrypted and Base64 encoded).</p>

<p>QBot tries to inject the received plugin in 3 different processes depending on the machine architecture.</p>

<p><a href="/assets/images/malware-analysis/qbot-banking-trojan/27.png"><img src="/assets/images/malware-analysis/qbot-banking-trojan/27.png" alt="27" /></a></p>

<p>It creates a new suspended process then writes the plugin to the process memory using <code class="language-plaintext highlighter-rouge">WriteProcessMemory()</code> and then resumes the injected process.</p>

<p><a href="/assets/images/malware-analysis/qbot-banking-trojan/28.png"><img src="/assets/images/malware-analysis/qbot-banking-trojan/28.png" alt="28" /></a></p>

<p>At the time of writing this, Qbot has 3 different plugins (“Password grabber”, “Cookie grabber”, “UPnP module”).</p>

<h1 id="conclusion">Conclusion</h1>

<p>QBot is considered to be a sophisticated malware, it’s receiving regular updates from time to time and it’s not likely to go away anytime soon.</p>

<p>There is still more features that I didn’t cover such as WebInjects so maybe I will come back to Qbot later I guess :)</p>

<h1 id="iocs">IOCs</h1>

<h4 id="hashes"><u>Hashes</u></h4>

<p>VBS File: b734caf792c968ca1870c3ec7dda68ad5dc47fef548751afb8509752c185a756</p>

<p>QBot: 112a64190b9a0f356880eebf05e195f4c16407032bf89fa843fd136da6f5d515</p>

<h4 id="urls"><u>URLs</u></h4>

<p>http://st29[.]ru/tbzirttmcnmb/88888888.png</p>

<p>http://restaurantbrighton[.]ru/uyqcb/88888888.png</p>

<p>http://royalapartments[.]pl/vtjwwoqxaix/88888888.png</p>

<p>http://alergeny.dietapacjenta[.]pl/pgaakzs/88888888.png</p>

<p>http://egyorg[.]com/vxvipjfembb/88888888.png</p>

<h4 id="c2-domains"><u>C2 Domains</u></h4>

<p>39.36.254.179:995</p>

<p>24.139.132.70:443</p>

<p>24.202.42.48:2222</p>

<p>72.204.242.138:443</p>

<p>172.242.156.50:995</p>

<p>72.204.242.138:20</p>

<p>68.174.15.223:443</p>

<p>74.193.197.246:443</p>

<p>96.56.237.174:990</p>

<p>64.19.74.29:995</p>

<p>70.168.130.172:443</p>

<p>189.236.166.167:443</p>

<p>68.4.137.211:443</p>

<p>76.187.8.160:443</p>

<p>76.86.57.179:2222</p>

<p>73.226.220.56:443</p>

<p>67.250.184.157:443</p>

<p>75.183.171.155:3389</p>

<p>173.172.205.216:443</p>

<p>173.3.132.17:995</p>

<p>172.78.30.215:443</p>

<p>207.255.161.8:32103</p>

<p>75.137.239.211:443</p>

<p>68.49.120.179:443</p>

<p>206.51.202.106:50003</p>

<p>82.127.193.151:2222</p>

<p>207.255.161.8:2222</p>

<p>207.255.161.8:2087</p>

<p>24.152.219.253:995</p>

<p>187.19.151.218:995</p>

<p>197.37.48.37:993</p>

<p>188.241.243.175:443</p>

<p>72.88.119.131:443</p>

<p>89.137.211.239:443</p>

<p>108.30.125.94:443</p>

<p>187.163.101.137:995</p>

<p>100.19.7.242:443</p>

<p>45.77.164.175:443</p>

<p>80.240.26.178:443</p>

<p>66.208.105.6:443</p>

<p>207.246.75.201:443</p>

<p>199.247.22.145:443</p>

<p>199.247.16.80:443</p>

<p>95.77.223.148:443</p>

<p>68.60.221.169:465</p>

<p>5.107.220.84:2222</p>

<p>41.228.212.22:443</p>

<p>86.233.4.153:2222</p>

<p>68.200.23.189:443</p>

<p>201.146.127.158:443</p>

<p>79.114.199.39:443</p>

<p>87.65.204.240:995</p>

<p>71.74.12.34:443</p>

<p>217.162.149.212:443</p>

<p>195.162.106.93:2222</p>

<p>75.165.112.82:50002</p>

<p>201.248.102.4:2078</p>

<p>96.41.93.96:443</p>

<p>89.247.216.127:443</p>

<p>84.232.238.30:443</p>

<p>103.238.231.40:443</p>

<p>174.34.67.106:2222</p>

<p>98.115.138.61:443</p>

<p>91.125.21.16:2222</p>

<p>84.247.55.190:443</p>

<p>193.248.44.2:2222</p>

<p>74.135.37.79:443</p>

<p>78.96.190.54:443</p>

<p>86.126.97.183:2222</p>

<p>2.50.47.97:2222</p>

<p>68.39.160.40:443</p>

<p>96.232.203.15:443</p>

<p>86.144.150.29:2222</p>

<p>71.220.191.200:443</p>

<p>24.231.54.185:2222</p>

<p>80.14.209.42:2222</p>

<p>24.164.79.147:443</p>

<p>70.183.127.6:995</p>

<p>47.153.115.154:993</p>

<p>184.180.157.203:2222</p>

<p>50.104.68.223:443</p>

<p>67.165.206.193:995</p>

<p>200.113.201.83:993</p>

<p>47.153.115.154:465</p>

<p>24.42.14.241:995</p>

<p>189.160.203.110:443</p>

<p>188.27.76.139:443</p>

<p>207.255.161.8:32102</p>

<p>49.207.105.25:443</p>

<p>71.210.177.4:443</p>

<p>117.242.253.163:443</p>

<p>50.244.112.106:443</p>

<p>69.92.54.95:995</p>

<p>41.34.91.90:995</p>

<p>72.204.242.138:53</p>

<p>41.97.138.74:443</p>

<p>72.29.181.77:2078</p>

<p>71.88.168.176:443</p>

<p>2.50.171.142:443</p>

<p>67.83.54.76:2222</p>

<p>86.125.145.90:2222</p>

<p>47.153.115.154:995</p>

<p>24.122.157.93:443</p>

<p>47.146.169.85:443</p>

<p>72.181.9.163:443</p>

<p>187.155.74.5:443</p>

<p>71.209.187.4:443</p>

<p>74.75.216.202:443</p>

<p>24.44.180.236:2222</p>

<p>24.43.22.220:993</p>

<p>108.188.116.179:443</p>

<p>100.4.173.223:443</p>

<p>76.170.77.99:443</p>

<p>70.95.118.217:443</p>

<p>134.0.196.46:995</p>

<p>68.225.56.31:443</p>

<p>72.204.242.138:32102</p>

<p>72.204.242.138:50001</p>

<p>108.190.151.108:2222</p>

<p>72.204.242.138:465</p>

<p>50.244.112.10:443</p>

<p>173.22.120.11:2222</p>

<p>24.43.22.220:995</p>

<p>24.43.22.220:443</p>

<p>92.17.167.87:2222</p>

<p>72.209.191.27:443</p>

<p>72.204.242.138:80</p>

<p>72.204.242.138:443</p>

<p>71.187.170.235:443</p>

<p>96.56.237.174:32103</p>

<p>71.187.7.239:443</p>

<p>184.98.104.7:995</p>

<p>70.124.29.226:443</p>

<p>137.99.224.198:443</p>

<p>73.23.194.75:443</p>

<p>151.205.102.42:443</p>

<p>64.224.76.152:443</p>

<p>72.204.242.138:32100</p>

<p>173.187.101.221:443</p>

<p>72.179.13.59:443</p>

<p>208.93.202.49:443</p>

<p>70.174.3.241:443</p>

<p>96.37.137.42:443</p>

<p>76.111.128.194:443</p>

<p>67.209.195.198:3389</p>

<p>61.3.184.27:443</p>

<p>24.42.14.241:443</p>

<p>74.56.167.31:443</p>

<p>5.193.61.212:2222</p>

<p>117.216.177.171:443</p>

<h1 id="references">References</h1>

<p><a href="https://www.youtube.com/watch?v=iB1psRMtlqg">Demystifying QBot Banking Trojan - BSides Belfast</a></p>

<p><a href="https://www.virusbulletin.com/virusbulletin/2017/06/vb2016-paper-diving-pinkslipbots-latest-campaign">https://www.virusbulletin.com/virusbulletin/2017/06/vb2016-paper-diving-pinkslipbots-latest-campaign</a></p>

<p><a href="https://www.fortinet.com/blog/threat-research/deep-analysis-qbot-campaign">https://www.fortinet.com/blog/threat-research/deep-analysis-qbot-campaign</a></p>

<p><a href="https://www.vkremez.com/2018/07/lets-learn-in-depth-reversing-of-qakbot.html">https://www.vkremez.com/2018/07/lets-learn-in-depth-reversing-of-qakbot.html</a></p>

<p><a href="https://www.hexacorn.com/blog/2016/07/01/enter-sandbox-part-12-the-library-of-naughty-libraries/">https://www.hexacorn.com/blog/2016/07/01/enter-sandbox-part-12-the-library-of-naughty-libraries/</a></p>

<p><a href="https://www.cyberbit.com/blog/endpoint-security/anti-vm-and-anti-sandbox-explained/">https://www.cyberbit.com/blog/endpoint-security/anti-vm-and-anti-sandbox-explained/</a></p>]]></content><author><name>Zakariae El bouzarazi</name></author><category term="Malware Analysis" /><summary type="html"><![CDATA[Qbot is a modular information stealer also known as Qakbot. It has been active for years since 2007. It has...]]></summary></entry><entry><title type="html">Deep Analysis of Anubis Banking Malware</title><link href="http://localhost:4000/malware%20analysis/anubis-banking-malware/" rel="alternate" type="text/html" title="Deep Analysis of Anubis Banking Malware" /><published>2020-07-04T00:00:00+01:00</published><updated>2020-07-04T00:00:00+01:00</updated><id>http://localhost:4000/malware%20analysis/anubis-banking-malware</id><content type="html" xml:base="http://localhost:4000/malware%20analysis/anubis-banking-malware/"><![CDATA[<h1 id="introduction">Introduction</h1>

<p>Anubis is a well known android banking malware. Although it hasn’t been around for long (since 2017), it had a higher impact than many older banking malwares due to its large set of capabilities.</p>

<p>As most malware families these days, this sample of Anubis is riding on the “COVID-19” pandemic to trick victims into installing it. This campaign seems to be targeting Turkey and the app can be downloaded from <code class="language-plaintext highlighter-rouge">"http://sosyalkampanya2[.]ml/pandemi/Pandemi-Destek.apk"</code></p>

<p><a href="/assets/images/malware-analysis/anubis-banking-malware/0.png"><img src="/assets/images/malware-analysis/anubis-banking-malware/0.png" alt="0" /></a></p>

<p>Anubis can spread in two different ways, either by malicious websites (like this one) where it downloads the malicious app directly or it can spread over google play store (where it appears as a legitimate app) then download and install the next stage payload (the malicious app).</p>

<h1 id="behavioral-analysis">Behavioral Analysis</h1>

<p>After installation, Anubis forces the user to grant it <code class="language-plaintext highlighter-rouge">Accessibility</code> permissions so it can run in the background and receive callbacks by the system when <code class="language-plaintext highlighter-rouge">AccessibilityEvents</code> are fired (such as window change and input focus).</p>

<p>Anubis also hides its icon from the app launcher to make it more difficult to remove.</p>

<p><a href="/assets/images/malware-analysis/anubis-banking-malware/1.gif"><img src="/assets/images/malware-analysis/anubis-banking-malware/1.gif" alt="1" /></a></p>

<h1 id="going-inside">Going inside</h1>

<p>After decompiling the APK, we can see that it’s asking for lots of permissions, which means lots of capabilities.</p>

<p><a href="/assets/images/malware-analysis/anubis-banking-malware/2.png"><img src="/assets/images/malware-analysis/anubis-banking-malware/2.png" alt="2" /></a></p>

<h1 id="capabilities">Capabilities</h1>

<p>Anubis has a large set of capabilities such as (Keylogging, Sound Recording, SMS Spam, VNC, File Encryption, …).</p>

<table>
  <tbody>
    <tr>
      <td><a href="/assets/images/malware-analysis/anubis-banking-malware/4.png"><img src="/assets/images/malware-analysis/anubis-banking-malware/4.png" alt="4" /></a></td>
      <td><a href="/assets/images/malware-analysis/anubis-banking-malware/5.png"><img src="/assets/images/malware-analysis/anubis-banking-malware/5.png" alt="5" /></a></td>
    </tr>
  </tbody>
</table>

<h1 id="c2-servers">C2 servers</h1>

<p>A quick search for “http/https” reveals some interesting things.
First, Anubis has a hardcoded C2 server <code class="language-plaintext highlighter-rouge">"http://sosyalkampanya2[.]tk/dedebus/"</code>, it’s also used as a VNC client.</p>

<p><a href="/assets/images/malware-analysis/anubis-banking-malware/6.png"><img src="/assets/images/malware-analysis/anubis-banking-malware/6.png" alt="6" /></a></p>

<p>To get new C2 servers, Anubis uses a twitter account for this purpose.</p>

<p>Interestingly enough, the twitter account used here was registered back in 2007.</p>

<p><a href="/assets/images/malware-analysis/anubis-banking-malware/7.png"><img src="/assets/images/malware-analysis/anubis-banking-malware/7.png" alt="7" /></a></p>

<p>The way this technique works is that it queries the twitter page (containing Chinese tweets) and searches for the text in between those two tags ( “ 苏尔的开始” ,  “ 苏尔苏尔完” ).</p>

<p>Next it replaces each Chinese character with a corresponding English character.</p>

<p>Finally, the result is Base64-decoded then it’s decrypted using RC4.</p>

<p><a href="/assets/images/malware-analysis/anubis-banking-malware/8.png"><img src="/assets/images/malware-analysis/anubis-banking-malware/8.png" alt="8" /></a></p>

<p>Here is the RC4 implementation:</p>

<p><a href="/assets/images/malware-analysis/anubis-banking-malware/9.png"><img src="/assets/images/malware-analysis/anubis-banking-malware/9.png" alt="9" /></a></p>

<p>The RC4 key is not dynamically generated, instead it’s using a hardcoded one <code class="language-plaintext highlighter-rouge">"zanubis"</code>.</p>

<p><a href="/assets/images/malware-analysis/anubis-banking-malware/10.png"><img src="/assets/images/malware-analysis/anubis-banking-malware/10.png" alt="10" /></a></p>

<h1 id="data-exfiltration">Data Exfiltration</h1>

<p>Anubis has a list of php endpoints to exfiltrate collected data, each endpoint corresponds to a different log type (keystrokes, running processes, …).</p>

<p>It sends a POST request to the C2 server containing the data in an encrypted form.</p>

<p><a href="/assets/images/malware-analysis/anubis-banking-malware/11.png"><img src="/assets/images/malware-analysis/anubis-banking-malware/11.png" alt="11" /></a></p>

<p>The data is encrypted using RC4 with the same key mentioned before then it’s Base64-encoded before it’s exfiltrated.</p>

<h1 id="receiving-commands">Receiving Commands</h1>

<p>Anubis can receive RAT commands (encrypted):</p>

<ul>
  <li>opendir</li>
  <li>downloadfile</li>
  <li>deletefilefolder</li>
  <li>startscreenVNC</li>
  <li>stopscreenVNC</li>
  <li>startsound</li>
  <li>startforegroundsound</li>
  <li>stopsound</li>
</ul>

<p><a href="/assets/images/malware-analysis/anubis-banking-malware/12.png"><img src="/assets/images/malware-analysis/anubis-banking-malware/12.png" alt="12" /></a></p>

<p>Additionally, it can receive a long string of commands separated by <code class="language-plaintext highlighter-rouge">"::"</code> to enable/disable certain functionalities, edit configs or send logs.</p>

<details style="color: #EEFFFF; font-family: monospace !default; font-size: 0.85em; background: #263238; border: 1px solid #263238; border-radius: 3px; padding: 10px; line-height: 1.8">
    <summary style="outline: none; cursor: pointer">
        <span style="color: darkgray">
            Expand to see more
        </span><br />
&emsp; startinj<br />
&emsp; Send_GO_SMS<br />
&emsp; nymBePsG0<br />
&emsp; GetSWSGO<br />
&emsp; telbookgotext<br />
&emsp; getapps<br />
&emsp; getpermissions<br />
</summary>
&emsp; startaccessibility<br />
&emsp; startpermission<br />
&emsp; ALERT<br />
&emsp; PUSH<br />
&emsp; startAutoPush<br />
&emsp; RequestPermissionInj<br />
&emsp; RequestPermissionGPS<br />
&emsp; ussd<br />
&emsp; sockshost<br />
&emsp; stopsocks5<br />
&emsp; spam<br />
&emsp; recordsound<br />
&emsp; replaceurl<br />
&emsp; startapplication<br />
&emsp; killBot<br />
&emsp; getkeylogger<br />
&emsp; startrat<br />
&emsp; startforward<br />
&emsp; stopforward<br />
&emsp; openbrowser<br />
&emsp; openactivity<br />
&emsp; cryptokey<br />
&emsp; decryptokey<br />
&emsp; getIP<br />
</details>

<h1 id="keylogging">Keylogging</h1>

<p>Anubis is listening for accessibility events in the background, if the event is <code class="language-plaintext highlighter-rouge">"TYPE_VIEW_TEXT_CHANGED"</code>, this means that the user is typing something so it gets records.</p>

<p><a href="/assets/images/malware-analysis/anubis-banking-malware/13.png"><img src="/assets/images/malware-analysis/anubis-banking-malware/13.png" alt="13" /></a></p>

<p>The keystrokes are written to a file called <code class="language-plaintext highlighter-rouge">"keys.log"</code>, this file is sent to the attacker on demand along with the victim’s device info. The file’s contents can be erased if the C2 response contains the word <code class="language-plaintext highlighter-rouge">"clear"</code>.</p>

<p><a href="/assets/images/malware-analysis/anubis-banking-malware/14.png"><img src="/assets/images/malware-analysis/anubis-banking-malware/14.png" alt="14" /></a></p>

<h1 id="file-encryption">File Encryption</h1>

<p>Anubis can also behave like a ransomware and encrypt files at <code class="language-plaintext highlighter-rouge">/mnt, /mount, /sdcard, /storage</code>.</p>

<p><a href="/assets/images/malware-analysis/anubis-banking-malware/15.png"><img src="/assets/images/malware-analysis/anubis-banking-malware/15.png" alt="15" /></a></p>

<p>The encryption/decryption key is received from the C2 server along with the required amount to decrypt the files.</p>

<table>
  <tbody>
    <tr>
      <td><a href="/assets/images/malware-analysis/anubis-banking-malware/16.png"><img src="/assets/images/malware-analysis/anubis-banking-malware/16.png" alt="16" /></a></td>
      <td><a href="/assets/images/malware-analysis/anubis-banking-malware/17.png"><img src="/assets/images/malware-analysis/anubis-banking-malware/17.png" alt="17" /></a></td>
    </tr>
  </tbody>
</table>

<p>The encryption process itself is just RC4 using the received key. Then it writes the encrypted data to a new file with the <code class="language-plaintext highlighter-rouge">.AnubisCrypt</code> extension and deletes the original file.</p>

<p><a href="/assets/images/malware-analysis/anubis-banking-malware/18.png"><img src="/assets/images/malware-analysis/anubis-banking-malware/18.png" alt="18" /></a></p>

<h1 id="screen-vnc">Screen VNC</h1>

<p>This feature was recently added to Anubis (according to underground forums), it can start a VNC server using <a href="http://developer.android.com/reference/android/media/projection/MediaProjection.html">MediaProjection</a> APIs available from Android 5.</p>

<p>Due to Android API restrictions, the attacker can only see the screen of an Android 5+ device but cannot control it.</p>

<p>As mentioned before, Anubis uses the hardcoded C2 server <code class="language-plaintext highlighter-rouge">"http://sosyalkampanya2[.]tk/dedebus/"</code> as a VNC client.</p>

<p><a href="/assets/images/malware-analysis/anubis-banking-malware/19.png"><img src="/assets/images/malware-analysis/anubis-banking-malware/19.png" alt="19" /></a></p>

<h1 id="intercepting-calls-and-sms">Intercepting Calls and SMS</h1>

<p>Anubis can intercept and forward phone calls to the attacker (which can be used for bank verification for example), it also tries to mute the phone for android 6.0 and lower.</p>

<table>
  <tbody>
    <tr>
      <td><a href="/assets/images/malware-analysis/anubis-banking-malware/20.png"><img src="/assets/images/malware-analysis/anubis-banking-malware/20.png" alt="20" /></a></td>
      <td><a href="/assets/images/malware-analysis/anubis-banking-malware/21.png"><img src="/assets/images/malware-analysis/anubis-banking-malware/21.png" alt="21" /></a></td>
    </tr>
  </tbody>
</table>

<p>SMS messages are intercepting using a broadcast receiver that listens for incoming SMS and sends it to the C2 server in clear text.</p>

<p><a href="/assets/images/malware-analysis/anubis-banking-malware/22.png"><img src="/assets/images/malware-analysis/anubis-banking-malware/22.png" alt="22" /></a></p>

<h1 id="targeted-apps">Targeted Apps</h1>

<p>Anubis loops through installed applications and compares them against hardcoded packages names (mostly banking apps). Once it determines that one of these apps is being used, it can carry out an <code class="language-plaintext highlighter-rouge">overlay</code> attack.</p>

<p><a href="/assets/images/malware-analysis/anubis-banking-malware/3.png"><img src="/assets/images/malware-analysis/anubis-banking-malware/3.png" alt="3" /></a></p>

<p>Overlay attack works by loading a <code class="language-plaintext highlighter-rouge">WebView</code> on top of the legitimate app that looks very similar to the original one. It can be used to steal payment data or used as an attack vector for phishing.</p>

<p>The loading of the <code class="language-plaintext highlighter-rouge">WebView</code> is almost instant so that the victim doesn’t get suspicious.</p>

<p><a href="/assets/images/malware-analysis/anubis-banking-malware/23.png"><img src="/assets/images/malware-analysis/anubis-banking-malware/23.png" alt="23" /></a></p>

<h1 id="attempting-to-remove-anubis">Attempting to Remove Anubis</h1>

<p>Anubis can utilize accessibility events to prevent the victim from uninstalling it.</p>

<p>It checks if the current open view contains these strings:</p>

<ul>
  <li>
    <p>current app name (malware app)</p>
  </li>
  <li><code class="language-plaintext highlighter-rouge">"com.android.settings"</code> which is the settings app</li>
  <li><code class="language-plaintext highlighter-rouge">"uninstall"</code> or <code class="language-plaintext highlighter-rouge">"to remove"</code></li>
</ul>

<p>If that’s the case, the victim is sent back to the home screen.</p>

<p><a href="/assets/images/malware-analysis/anubis-banking-malware/25.gif"><img src="/assets/images/malware-analysis/anubis-banking-malware/25.gif" alt="25" /></a></p>

<p><a href="/assets/images/malware-analysis/anubis-banking-malware/24.png"><img src="/assets/images/malware-analysis/anubis-banking-malware/24.png" alt="24" /></a></p>

<h1 id="conclusion">Conclusion</h1>

<p>Anubis is a very rich banking malware with lots of features and capabilities. Although there are rumors that Maza-In (the actor behind Anubis) had been arrested by the Russian authorities, we can see that it’s getting new updates (currently 2.5) and it’s still a common choice of criminals when it comes to Android banking malware.</p>

<p>I have also written a small script for fetching new C2 domains + decrypting sent/received data:
<a href="https://github.com/N1ght-W0lf/MalwareAnalysis/blob/master/Anubis/c2_emulator.py">https://github.com/N1ght-W0lf/MalwareAnalysis/blob/master/Anubis/c2_emulator.py</a></p>

<h1 id="iocs">IOCs</h1>

<h4 id="apks"><u>APKs</u></h4>

<p>Pandemi-Destek.apk: 8cb941658ed8340b67a38a47162ab8850b89a14eee2899f0761fadd4f648fd5e</p>

<h4 id="c2-related"><u>C2 Related</u></h4>

<p>http://sosyalkampanya2[.]tk/dedebus/</p>

<p>https://twitter[.]com/qweqweqwe/</p>

<h4 id="targeted-apps-1"><u>Targeted Apps</u></h4>

<p>at.spardat.bcrmobile</p>

<p>at.spardat.netbanking</p>

<p>com.bankaustria.android.olb</p>

<p>com.bmo.mobile</p>

<p>com.cibc.android.mobi</p>

<p>com.rbc.mobile.android</p>

<p>com.scotiabank.mobile</p>

<p>com.td</p>

<p>cz.airbank.android</p>

<p>eu.inmite.prj.kb.mobilbank</p>

<p>com.bankinter.launcher</p>

<p>com.kutxabank.android</p>

<p>com.rsi</p>

<p>com.tecnocom.cajalaboral</p>

<p>es.bancopopular.nbmpopular</p>

<p>es.evobanco.bancamovil</p>

<p>es.lacaixa.mobile.android.newwapicon</p>

<p>com.dbs.hk.dbsmbanking</p>

<p>com.FubonMobileClient</p>

<p>com.hangseng.rbmobile</p>

<p>com.MobileTreeApp</p>

<p>com.mtel.androidbea</p>

<p>com.scb.breezebanking.hk</p>

<p>hk.com.hsbc.hsbchkmobilebanking</p>

<p>com.aff.otpdirekt</p>

<p>com.ideomobile.hapoalim</p>

<p>com.infrasofttech.indianBank</p>

<p>com.mobikwik_new</p>

<p>com.oxigen.oxigenwallet</p>

<p>jp.co.aeonbank.android.passbook</p>

<p>jp.co.netbk</p>

<p>jp.co.rakuten_bank.rakutenbank</p>

<p>jp.co.sevenbank.AppPassbook</p>

<p>jp.co.smbc.direct</p>

<p>jp.mufg.bk.applisp.app</p>

<p>com.barclays.ke.mobile.android.ui</p>

<p>nz.co.anz.android.mobilebanking</p>

<p>nz.co.asb.asbmobile</p>

<p>nz.co.bnz.droidbanking</p>

<p>nz.co.kiwibank.mobile</p>

<p>com.getingroup.mobilebanking</p>

<p>eu.eleader.mobilebanking.pekao.firm</p>

<p>eu.eleader.mobilebanking.pekao</p>

<p>eu.eleader.mobilebanking.raiffeisen</p>

<p>pl.bzwbk.bzwbk24</p>

<p>pl.ipko.mobile</p>

<p>pl.mbank</p>

<p>alior.bankingapp.android</p>

<p>com.comarch.mobile.banking.bgzbnpparibas.biznes</p>

<p>com.comarch.security.mobilebanking</p>

<p>com.empik.empikapp</p>

<p>com.empik.empikfoto</p>

<p>com.finanteq.finance.ca</p>

<p>com.orangefinansek</p>

<p>com.orangefinanse</p>

<p>eu.eleader.mobilebanking.invest</p>

<p>pl.aliorbank.aib</p>

<p>pl.allegro</p>

<p>pl.bosbank.mobile</p>

<p>pl.bph</p>

<p>pl.bps.bankowoscmobilna</p>

<p>pl.bzwbk.ibiznes24</p>

<p>pl.bzwbk.mobile.tab.bzwbk24</p>

<p>pl.ceneo</p>

<p>pl_pl.ceneo</p>

<p>pl.com.rossmann.centauros</p>

<p>pl.fmbank.smart</p>

<p>pl.ideabank.mobilebanking</p>

<p>pl.ing.mojeing</p>

<p>pl.millennium.corpApp</p>

<p>pl.orange.mojeorange</p>

<p>pl.pkobp.iko</p>

<p>pl.pkobp.ipkobiznes</p>

<p>com.kuveytturk.mobil</p>

<p>com.magiclick.odeabank</p>

<p>com.mobillium.papara</p>

<p>com.pozitron.albarakaturk</p>

<p>com.teb</p>

<p>ccom.tmob.denizbank</p>

<p>com.tmob.denizbank</p>

<p>com.tmob.tabletdeniz</p>

<p>com.vakifbank.mobilel</p>

<p>com.vakifbank.mobile</p>

<p>tr.com.sekerbilisim.mbank</p>

<p>wit.android.bcpBankingApp.millenniumPL</p>

<p>com.advantage.RaiffeisenBank</p>

<p>hr.asseco.android.jimba.mUCI.ro</p>

<p>may.maybank.android</p>

<p>ro.btrl.mobile</p>

<p>com.amazon.mShop.android.shopping</p>

<p>com.amazon.windowshop</p>

<p>com.ebay.mobile</p>

<p>ru.sberbankmobile</p>

<p>ru.sberbank.spasibo</p>

<p>ru.sberbank_sbbol</p>

<p>ru.sberbank.mobileoffice</p>

<p>ru.sberbank.sberbankir</p>

<p>ru.alfabank.mobile.android</p>

<p>ru.alfabank.oavdo.amc</p>

<p>by.st.alfa</p>

<p>ru.alfabank.sense</p>

<p>ru.alfadirect.app</p>

<p>ru.mw</p>

<p>com.idamob.tinkoff.android</p>

<p>ru.tcsbank.c2c</p>

<p>ru.tinkoff.mgp</p>

<p>ru.tinkoff.sme</p>

<p>ru.tinkoff.goabroad</p>

<p>ru.vtb24.mobilebanking.android</p>

<p>ru.bm.mbm</p>

<p>com.vtb.mobilebank</p>

<p>com.bssys.VTBClient</p>

<p>com.bssys.vtb.mobileclient</p>

<p>com.akbank.android.apps.akbank_direkt</p>

<p>com.akbank.android.apps.akbank_direkt_tablet</p>

<p>com.akbank.softotp</p>

<p>com.akbank.android.apps.akbank_direkt_tablet_20</p>

<p>com.fragment.akbank</p>

<p>com.ykb.android</p>

<p>com.ykb.android.mobilonay</p>

<p>com.ykb.avm</p>

<p>com.ykb.androidtablet</p>

<p>com.veripark.ykbaz</p>

<p>com.softtech.iscek</p>

<p>com.yurtdisi.iscep</p>

<p>com.softtech.isbankasi</p>

<p>com.monitise.isbankmoscow</p>

<p>com.finansbank.mobile.cepsube</p>

<p>finansbank.enpara</p>

<p>com.magiclick.FinansPOS</p>

<p>com.matriksdata.finansyatirim</p>

<p>finansbank.enpara.sirketim</p>

<p>com.vipera.ts.starter.QNB</p>

<p>com.redrockdigimark</p>

<p>com.garanti.cepsubesi</p>

<p>com.garanti.cepbank</p>

<p>com.garantibank.cepsubesiro</p>

<p>biz.mobinex.android.apps.cep_sifrematik</p>

<p>com.garantiyatirim.fx</p>

<p>com.tmobtech.halkbank</p>

<p>com.SifrebazCep</p>

<p>eu.newfrontier.iBanking.mobile.Halk.Retail</p>

<p>tr.com.tradesoft.tradingsystem.gtpmobile.halk</p>

<p>com.DijitalSahne.EnYakinHalkbank</p>

<p>com.ziraat.ziraatmobil</p>

<p>com.ziraat.ziraattablet</p>

<p>com.matriksmobile.android.ziraatTrader</p>

<p>com.matriksdata.ziraatyatirim.pad</p>

<p>de.comdirect.android</p>

<p>de.commerzbanking.mobil</p>

<p>de.consorsbank</p>

<p>com.db.mm.deutschebank</p>

<p>de.dkb.portalapp</p>

<p>com.de.dkb.portalapp</p>

<p>com.ing.diba.mbbr2</p>

<p>de.postbank.finanzassistent</p>

<p>mobile.santander.de</p>

<p>de.fiducia.smartphone.android.banking.vr</p>

<p>fr.creditagricole.androidapp</p>

<p>fr.axa.monaxa</p>

<p>fr.banquepopulaire.cyberplus</p>

<p>net.bnpparibas.mescomptes</p>

<p>com.boursorama.android.clients</p>

<p>com.caisseepargne.android.mobilebanking</p>

<p>fr.lcl.android.customerarea</p>

<p>com.paypal.android.p2pmobile</p>

<p>com.wf.wellsfargomobile</p>

<p>com.wf.wellsfargomobile.tablet</p>

<p>com.wellsFargo.ceomobile</p>

<p>com.usbank.mobilebanking</p>

<p>com.usaa.mobile.android.usaa</p>

<p>com.suntrust.mobilebanking</p>

<p>com.moneybookers.skrillpayments.neteller</p>

<p>com.moneybookers.skrillpayments</p>

<p>com.clairmail.fth</p>

<p>com.konylabs.capitalone</p>

<p>com.yinzcam.facilities.verizon</p>

<p>com.chase.sig.android</p>

<p>com.infonow.bofa</p>

<p>com.bankofamerica.cashpromobile</p>

<p>uk.co.bankofscotland.businessbank</p>

<p>com.grppl.android.shell.BOS</p>

<p>com.rbs.mobile.android.natwestoffshore</p>

<p>com.rbs.mobile.android.natwest</p>

<p>com.rbs.mobile.android.natwestbandc</p>

<p>com.rbs.mobile.investisir</p>

<p>com.phyder.engage</p>

<p>com.rbs.mobile.android.rbs</p>

<p>com.rbs.mobile.android.rbsbandc</p>

<p>uk.co.santander.santanderUK</p>

<p>uk.co.santander.businessUK.bb</p>

<p>com.sovereign.santander</p>

<p>com.ifs.banking.fiid4202</p>

<p>com.fi6122.godough</p>

<p>com.rbs.mobile.android.ubr</p>

<p>com.htsu.hsbcpersonalbanking</p>

<p>com.grppl.android.shell.halifax</p>

<p>com.grppl.android.shell.CMBlloydsTSB73</p>

<p>com.barclays.android.barclaysmobilebanking</p>

<p>com.unionbank.ecommerce.mobile.android</p>

<p>com.unionbank.ecommerce.mobile.commercial.legacy</p>

<p>com.snapwork.IDBI</p>

<p>com.idbibank.abhay_card</p>

<p>src.com.idbi</p>

<p>com.idbi.mpassbook</p>

<p>com.ing.mobile</p>

<p>com.snapwork.hdfc</p>

<p>com.sbi.SBIFreedomPlus</p>

<p>hdfcbank.hdfcquickbank</p>

<p>com.csam.icici.bank.imobile</p>

<p>in.co.bankofbaroda.mpassbook</p>

<p>com.axis.mobile</p>

<p>cz.csob.smartbanking</p>

<p>cz.sberbankcz</p>

<p>sk.sporoapps.accounts</p>

<p>sk.sporoapps.skener</p>

<p>com.cleverlance.csas.servis24</p>

<p>org.westpac.bank</p>

<p>nz.co.westpac</p>

<p>org.westpac.banknz.co.westpac</p>

<p>au.com.suncorp.SuncorpBank</p>

<p>org.stgeorge.bank</p>

<p>org.banksa.bank</p>

<p>au.com.newcastlepermanent</p>

<p>au.com.nab.mobile</p>

<p>au.com.mebank.banking</p>

<p>au.com.ingdirect.android</p>

<p>MyING.be</p>

<p>com.imb.banking2</p>

<p>com.fusion.ATMLocator</p>

<p>au.com.cua.mb</p>

<p>com.commbank.netbank</p>

<p>com.cba.android.netbank</p>

<p>com.citibank.mobile.au</p>

<p>com.citibank.mobile.uk</p>

<p>com.citi.citimobile</p>

<p>org.bom.bank</p>

<p>com.bendigobank.mobile</p>

<p>me.doubledutch.hvdnz.cbnationalconference2016</p>

<p>au.com.bankwest.mobile</p>

<p>com.bankofqueensland.boq</p>

<p>com.anz.android.gomoney</p>

<p>com.anz.android</p>

<p>com.anz.SingaporeDigitalBanking</p>

<p>com.anzspot.mobile</p>

<p>com.crowdcompass.appSQ0QACAcYJ</p>

<p>com.arubanetworks.atmanz</p>

<p>com.quickmobile.anzirevents15</p>

<p>at.volksbank.volksbankmobile</p>

<p>it.volksbank.android</p>

<p>it.secservizi.mobile.atime.bpaa</p>

<p>de.fiducia.smartphone.android.securego.vr</p>

<p>com.isis_papyrus.raiffeisen_pay_eyewdg</p>

<p>at.easybank.mbanking</p>

<p>at.easybank.tablet</p>

<p>at.easybank.securityapp</p>

<p>at.bawag.mbanking</p>

<p>com.bawagpsk.securityapp</p>

<p>at.psa.app.bawag</p>

<p>com.pozitron.iscep</p>

<p>com.pozitron.vakifbank</p>

<p>com.starfinanz.smob.android.sfinanzstatus</p>

<p>com.starfinanz.mobile.android.pushtan</p>

<p>com.entersekt.authapp.sparkasse</p>

<p>com.starfinanz.smob.android.sfinanzstatus.tablet</p>

<p>com.starfinanz.smob.android.sbanking</p>

<p>com.palatine.android.mobilebanking.prod</p>

<p>fr.laposte.lapostemobile</p>

<p>fr.laposte.lapostetablet</p>

<p>com.cm_prod.bad</p>

<p>com.cm_prod.epasal</p>

<p>com.cm_prod_tablet.bad</p>

<p>com.cm_prod.nosactus</p>

<p>mobi.societegenerale.mobile.lappli</p>

<p>com.bbva.netcash</p>

<p>com.bbva.bbvacontigo</p>

<p>com.bbva.bbvawallet</p>

<p>es.bancosantander.apps</p>

<p>com.santander.app</p>

<p>es.cm.android</p>

<p>es.cm.android.tablet</p>

<p>com.bankia.wallet</p>

<p>com.jiffyondemand.user</p>

<p>com.latuabancaperandroid</p>

<p>com.latuabanca_tabperandroid</p>

<p>com.lynxspa.bancopopolare</p>

<p>com.unicredit</p>

<p>it.bnl.apps.banking</p>

<p>it.bnl.apps.enterprise.bnlpay</p>

<p>it.bpc.proconl.mbplus</p>

<p>it.copergmps.rt.pf.android.sp.bmps</p>

<p>it.gruppocariparma.nowbanking</p>

<p>it.ingdirect.app</p>

<p>it.nogood.container</p>

<p>it.popso.SCRIGNOapp</p>

<p>posteitaliane.posteapp.apppostepay</p>

<p>com.abnamro.nl.mobile.payments</p>

<p>com.triodos.bankingnl</p>

<p>nl.asnbank.asnbankieren</p>

<p>nl.snsbank.mobielbetalen</p>

<p>com.btcturk</p>

<p>com.ingbanktr.ingmobil</p>

<p>tr.com.hsbc.hsbcturkey</p>

<p>com.att.myWireless</p>

<p>com.vzw.hss.myverizon</p>

<p>aib.ibank.android</p>

<p>com.bbnt</p>

<p>com.csg.cs.dnmbs</p>

<p>com.discoverfinancial.mobile</p>

<p>com.eastwest.mobile</p>

<p>com.fi6256.godough</p>

<p>com.fi6543.godough</p>

<p>com.fi6665.godough</p>

<p>com.fi9228.godough</p>

<p>com.fi9908.godough</p>

<p>com.ifs.banking.fiid1369</p>

<p>com.ifs.mobilebanking.fiid3919</p>

<p>com.jackhenry.rockvillebankct</p>

<p>com.jackhenry.washingtontrustbankwa</p>

<p>com.jpm.sig.android</p>

<p>com.sterling.onepay</p>

<p>com.svb.mobilebanking</p>

<p>org.usemployees.mobile</p>

<p>pinacleMobileiPhoneApp.android</p>

<p>com.fuib.android.spot.online</p>

<p>com.ukrsibbank.client.android</p>

<p>ru.alfabank.mobile.ua.android</p>

<p>ua.aval.dbo.client.android</p>

<p>ua.com.cs.ifobs.mobile.android.otp</p>

<p>ua.com.cs.ifobs.mobile.android.pivd</p>

<p>ua.oschadbank.online</p>

<p>ua.privatbank.ap24</p>

<p>com.Plus500</p>

<p>com.Plus500(Crypt)+</p>

<p>eu.unicreditgroup.hvbapptan</p>

<p>com.targo_prod.bad</p>

<p>com.db.pwcc.dbmobile</p>

<p>com.db.mm.norisbank</p>

<p>com.bitmarket.trader</p>

<p>com.bitmarket.trader(Crypt)+</p>

<p>com.plunien.poloniex</p>

<p>com.plunien.poloniex(Crypt)+</p>

<p>com.mycelium.wallet</p>

<p>com.mycelium.wallet(Crypt)+</p>

<p>com.bitfinex.bfxapp</p>

<p>com.bitfinex.bfxapp(Crypt)+</p>

<p>com.binance.dev</p>

<p>com.binance.dev(Crypt)+</p>

<p>com.btcturk(Crypt)</p>

<p>com.binance.odapplications</p>

<p>com.binance.odapplications(Crypt)</p>

<p>com.blockfolio.blockfolio</p>

<p>com.blockfolio.blockfolio(Crypt)</p>

<p>com.crypter.cryptocyrrency</p>

<p>com.crypter.cryptocyrrency(Crypt)</p>

<p>io.getdelta.android</p>

<p>io.getdelta.android(Crypt)</p>

<p>com.edsoftapps.mycoinsvalue</p>

<p>com.edsoftapps.mycoinsvalue(Crypt)</p>

<p>com.coin.profit</p>

<p>com.coin.profit(Crypt)</p>

<p>com.mal.saul.coinmarketcap</p>

<p>com.mal.saul.coinmarketcap(Crypt)</p>

<p>com.tnx.apps.coinportfolio</p>

<p>com.tnx.apps.coinportfolio(Crypt)</p>

<p>com.coinbase.android</p>

<p>com.coinbase.android(Crypt)+</p>

<p>com.portfolio.coinbase_tracker</p>

<p>com.portfolio.coinbase_tracker(Crypt)+</p>

<p>de.schildbach.wallet</p>

<p>de.schildbach.wallet(Crypt)</p>

<p>piuk.blockchain.android</p>

<p>piuk.blockchain.android(Crypt)+</p>

<p>info.blockchain.merchant</p>

<p>info.blockchain.merchant(Crypt)+</p>

<p>com.jackpf.blockchainsearch</p>

<p>com.jackpf.blockchainsearch(Crypt)</p>

<p>com.unocoin.unocoinwallet</p>

<p>com.unocoin.unocoinwallet(Crypt)+</p>

<p>com.unocoin.unocoinmerchantPoS</p>

<p>com.unocoin.unocoinmerchantPoS(Crypt)+</p>

<p>com.thunkable.android.santoshmehta364.UNOCOIN_LIVE</p>

<p>com.thunkable.android.santoshmehta364.UNOCOIN_LIVE(Crypt)</p>

<p>wos.com.zebpay</p>

<p>wos.com.zebpay(Crypt)+</p>

<p>com.localbitcoinsmbapp</p>

<p>com.localbitcoinsmbapp(Crypt)+</p>

<p>com.thunkable.android.manirana54.LocalBitCoins</p>

<p>com.thunkable.android.manirana54.LocalBitCoins(Crypt)+</p>

<p>com.thunkable.android.manirana54.LocalBitCoins_unblock</p>

<p>com.thunkable.android.manirana54.LocalBitCoins_unblock(Crypt)+</p>

<p>com.localbitcoins.exchange</p>

<p>com.localbitcoins.exchange(Crypt)+</p>

<p>com.coins.bit.local</p>

<p>com.coins.bit.local(Crypt)+</p>

<p>com.coins.ful.bit</p>

<p>com.coins.ful.bit(Crypt)+</p>

<p>com.jamalabbasii1998.localbitcoin</p>

<p>com.jamalabbasii1998.localbitcoin(Crypt)+</p>

<p>zebpay.Application</p>

<p>zebpay.Application(Crypt)+</p>

<p>com.bitcoin.ss.zebpayindia</p>

<p>com.bitcoin.ss.zebpayindia(Crypt)</p>

<p>com.kryptokit.jaxx</p>

<p>com.kryptokit.jaxx(Crypt)</p>

<h1 id="references">References</h1>

<p><a href="https://info.phishlabs.com/blog/bankbot-anubis-telegram-chinese-c2">https://info.phishlabs.com/blog/bankbot-anubis-telegram-chinese-c2</a></p>

<p><a href="https://blog.trendmicro.com/trendlabs-security-intelligence/anubis-android-malware-returns-with-over-17000-samples/">https://blog.trendmicro.com/trendlabs-security-intelligence/anubis-android-malware-returns-with-over-17000-samples/</a></p>

<p><a href="https://eybisi.run/Mobile-Malware-Analysis-Tricks-used-in-Anubis">https://eybisi.run/Mobile-Malware-Analysis-Tricks-used-in-Anubis</a></p>]]></content><author><name>Zakariae El bouzarazi</name></author><category term="Malware Analysis" /><summary type="html"><![CDATA[Anubis is a well known android banking malware. Although it hasn't been around for long, it had...]]></summary></entry></feed>